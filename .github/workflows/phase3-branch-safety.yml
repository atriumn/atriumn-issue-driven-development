# Phase 3: Branch Safety & Context Preservation
# This file contains enhanced branch management and safety validation jobs
# These would be integrated into the main development-pipeline.yml workflow

name: Phase 3 - Branch Safety & Context Preservation

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
      issue_number:
        required: true
        type: string
    secrets:
      REPO_TOKEN:
        required: true

jobs:
  # Enhanced branch management and validation
  validate-branch-continuity:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.branch-check.outputs.expected_branch }}
      branch_status: ${{ steps.branch-state.outputs.status }}
      commits_ahead: ${{ steps.branch-state.outputs.commits_ahead }}
      commits_behind: ${{ steps.branch-state.outputs.commits_behind }}
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0

      - name: Ensure Pipeline Branch Exists
        id: branch-check
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          # Get expected branch from issue labels
          EXPECTED_BRANCH=$(gh issue view ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --json labels --jq '.labels[] | select(.name | startswith("branch:")) | .name | sub("branch:"; "")')
          
          if [ -z "$EXPECTED_BRANCH" ]; then
            echo "❌ No pipeline branch found in issue labels"
            echo "This indicates the pipeline was not properly started."
            gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
            ❌ **Pipeline Branch Error**
            
            No pipeline branch found for this issue. This usually means:
            - Pipeline was not started with '@claude run development pipeline'
            - Issue labels were modified incorrectly
            - Pipeline initialization failed
            
            **To Fix**: Start the pipeline with '@claude run development pipeline'
            
            **Debug Information:**
            - Issue: #${{ inputs.issue_number }}
            - Repository: ${{ inputs.repo_name }}
            - Workflow Run: ${{ github.run_id }}
            "
            exit 1
          fi
          
          echo "expected_branch=$EXPECTED_BRANCH" >> $GITHUB_OUTPUT
          echo "✅ Expected pipeline branch: $EXPECTED_BRANCH"

      - name: Validate Branch Exists in Repository
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.branch-check.outputs.expected_branch }}"
          
          # Check if branch exists in remote
          if ! git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "❌ Pipeline branch does not exist in repository: $BRANCH_NAME"
            gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
            ❌ **Missing Pipeline Branch**
            
            Expected branch \`$BRANCH_NAME\` does not exist in repository.
            
            **Possible Causes:**
            - Branch was deleted manually
            - Pipeline initialization failed
            - Branch name mismatch
            - Repository access issues
            
            **To Fix**: 
            1. Restart the pipeline to recreate the branch
            2. Comment '@claude restart pipeline' to begin fresh
            
            **Debug Information:**
            - Expected Branch: \`$BRANCH_NAME\`
            - Repository: ${{ inputs.repo_name }}
            - Issue: #${{ inputs.issue_number }}
            "
            exit 1
          fi
          
          echo "✅ Pipeline branch exists: $BRANCH_NAME"

      - name: Check Branch State
        id: branch-state
        run: |
          BRANCH_NAME="${{ steps.branch-check.outputs.expected_branch }}"
          
          # Try to get base branch from config, fallback to main
          BASE_BRANCH="main"
          if [ -f ".github/development-pipeline-config.yml" ]; then
            BASE_BRANCH=$(yq eval '.base_branch' ".github/development-pipeline-config.yml" 2>/dev/null || echo "main")
          fi
          
          # Fetch and checkout the branch
          git fetch origin "$BRANCH_NAME"
          git checkout "$BRANCH_NAME"
          git pull origin "$BRANCH_NAME"
          
          # Check if base branch exists
          if ! git rev-parse "origin/$BASE_BRANCH" >/dev/null 2>&1; then
            echo "⚠️ Base branch $BASE_BRANCH does not exist, falling back to main"
            BASE_BRANCH="main"
          fi
          
          # Check if branch is ahead/behind base
          COMMITS_AHEAD=$(git rev-list --count HEAD ^origin/$BASE_BRANCH 2>/dev/null || echo "0")
          COMMITS_BEHIND=$(git rev-list --count origin/$BASE_BRANCH ^HEAD 2>/dev/null || echo "0")
          
          echo "commits_ahead=$COMMITS_AHEAD" >> $GITHUB_OUTPUT
          echo "commits_behind=$COMMITS_BEHIND" >> $GITHUB_OUTPUT
          
          # Determine branch status
          if [ "$COMMITS_AHEAD" -eq 0 ]; then
            echo "status=no_changes" >> $GITHUB_OUTPUT
            echo "⚠️ Branch has no commits ahead of $BASE_BRANCH"
          elif [ "$COMMITS_BEHIND" -gt 10 ]; then
            echo "status=outdated" >> $GITHUB_OUTPUT
            echo "⚠️ Branch is significantly behind $BASE_BRANCH ($COMMITS_BEHIND commits)"
          else
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "✅ Branch state healthy"
          fi
          
          echo "✅ Branch state: +$COMMITS_AHEAD/-$COMMITS_BEHIND vs $BASE_BRANCH"

      - name: Handle Branch State Issues
        if: steps.branch-state.outputs.status != 'healthy'
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.branch-check.outputs.expected_branch }}"
          STATUS="${{ steps.branch-state.outputs.status }}"
          COMMITS_AHEAD="${{ steps.branch-state.outputs.commits_ahead }}"
          COMMITS_BEHIND="${{ steps.branch-state.outputs.commits_behind }}"
          
          case "$STATUS" in
            "no_changes")
              gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
              ⚠️ **Branch State Warning**
              
              Pipeline branch \`$BRANCH_NAME\` has no changes ahead of base branch.
              
              **This usually means:**
              - Pipeline is just starting (normal)
              - Previous work was lost or reverted
              - Branch was reset manually
              
              **Current State**: No commits ahead of base
              **Action**: Pipeline can continue normally
              "
              ;;
            "outdated")
              gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
              ⚠️ **Branch Outdated Warning**
              
              Pipeline branch \`$BRANCH_NAME\` is significantly behind base branch.
              
              **Current State**: $COMMITS_BEHIND commits behind base
              **Risk**: Potential merge conflicts
              
              **Recommended Actions:**
              - Continue with current branch (pipeline will handle conflicts)
              - Or comment '@claude rebase branch' to update branch first
              - Or comment '@claude restart pipeline' for fresh start
              
              **Pipeline Status**: Can continue but may require conflict resolution
              "
              ;;
          esac

  # Context validation between phases
  validate-context-continuity:
    needs: validate-branch-continuity
    runs-on: ubuntu-latest
    outputs:
      decision_record_path: ${{ steps.context.outputs.decision_record_path }}
      research_doc_path: ${{ steps.context.outputs.research_doc_path }}
      plan_doc_path: ${{ steps.context.outputs.plan_doc_path }}
      current_phase: ${{ steps.context.outputs.current_phase }}
      context_integrity: ${{ steps.context.outputs.integrity }}
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          
      - name: Checkout pipeline branch
        run: |
          BRANCH_NAME="${{ needs.validate-branch-continuity.outputs.branch_name }}"
          git checkout "$BRANCH_NAME"
          git pull origin "$BRANCH_NAME"

      - name: Validate Decision Record Context
        id: context
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          # Get thoughts directory from config or default
          THOUGHTS_DIR="thoughts/"
          if [ -f ".github/development-pipeline-config.yml" ]; then
            THOUGHTS_DIR=$(yq eval '.thoughts_directory' ".github/development-pipeline-config.yml" 2>/dev/null || echo "thoughts/")
          fi
          
          DECISION_RECORD="$THOUGHTS_DIR/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md"
          
          # Check decision record exists
          if [ ! -f "$DECISION_RECORD" ]; then
            echo "❌ Decision record missing: $DECISION_RECORD"
            gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
            ❌ **Context Error: Missing Decision Record**
            
            The pipeline decision record is missing: \`$DECISION_RECORD\`
            
            This indicates a serious pipeline integrity issue. The decision record is required for maintaining context between phases.
            
            **Possible Causes:**
            - Decision record was deleted manually
            - Pipeline initialization failed
            - Wrong thoughts directory configuration
            - File permission issues
            
            **Action Required**: 
            - Check if decision record exists in different location
            - Or restart the pipeline from the beginning: '@claude restart pipeline'
            
            **Debug Information:**
            - Expected Path: \`$DECISION_RECORD\`
            - Branch: \`${{ needs.validate-branch-continuity.outputs.branch_name }}\`
            - Repository: ${{ inputs.repo_name }}
            "
            exit 1
          fi
          
          echo "decision_record_path=$DECISION_RECORD" >> $GITHUB_OUTPUT
          echo "✅ Decision record exists: $DECISION_RECORD"
          
          # Determine current phase based on decision record content
          if grep -q "## Implementation Phase (Complete" "$DECISION_RECORD"; then
            CURRENT_PHASE="pr-creation"
          elif grep -q "## Planning Phase (Complete" "$DECISION_RECORD"; then
            CURRENT_PHASE="implementation"
          elif grep -q "### Research Phase (Complete ✅)" "$DECISION_RECORD"; then
            CURRENT_PHASE="planning"
          elif grep -q "## Research Phase" "$DECISION_RECORD"; then
            CURRENT_PHASE="research"
          else
            CURRENT_PHASE="initialization"
          fi
          
          echo "current_phase=$CURRENT_PHASE" >> $GITHUB_OUTPUT
          echo "✅ Current phase: $CURRENT_PHASE"

      - name: Validate Phase-Specific Context
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          THOUGHTS_DIR="thoughts/"
          if [ -f ".github/development-pipeline-config.yml" ]; then
            THOUGHTS_DIR=$(yq eval '.thoughts_directory' ".github/development-pipeline-config.yml" 2>/dev/null || echo "thoughts/")
          fi
          
          CURRENT_PHASE="${{ steps.context.outputs.current_phase }}"
          INTEGRITY="healthy"
          
          case "$CURRENT_PHASE" in
            "planning")
              # Planning phase needs research document
              RESEARCH_DOC=$(find "$THOUGHTS_DIR/shared/research" -name "*issue-${{ inputs.issue_number }}*" -type f | head -1)
              if [ -z "$RESEARCH_DOC" ]; then
                echo "❌ Planning phase requires research document"
                INTEGRITY="missing_research"
                gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
                ❌ **Context Error: Missing Research**
                
                Planning phase requires a completed research document, but none was found.
                
                **Expected Path**: \`$THOUGHTS_DIR/shared/research/*issue-${{ inputs.issue_number }}*.md\`
                **Current Phase**: Planning
                
                **Action Required**: 
                - Complete the research phase first
                - Or restart pipeline: '@claude restart pipeline'
                
                **Recovery Options:**
                - '@claude retry research' - Retry research phase
                - '@claude restart pipeline' - Start completely over
                "
                exit 1
              fi
              echo "research_doc_path=$RESEARCH_DOC" >> $GITHUB_OUTPUT
              echo "✅ Research document found: $RESEARCH_DOC"
              ;;
              
            "implementation")
              # Implementation phase needs both research and plan
              RESEARCH_DOC=$(find "$THOUGHTS_DIR/shared/research" -name "*issue-${{ inputs.issue_number }}*" -type f | head -1)
              PLAN_DOC=$(find "$THOUGHTS_DIR/shared/plans" -name "*issue-${{ inputs.issue_number }}*" -type f | head -1)
              
              if [ -z "$RESEARCH_DOC" ] || [ -z "$PLAN_DOC" ]; then
                echo "❌ Implementation phase requires both research and plan documents"
                INTEGRITY="missing_prerequisites"
                gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
                ❌ **Context Error: Missing Prerequisites**
                
                Implementation phase requires both research and plan documents:
                - Research: $([ -n "$RESEARCH_DOC" ] && echo "✅ Found at \`$RESEARCH_DOC\`" || echo "❌ Missing")
                - Plan: $([ -n "$PLAN_DOC" ] && echo "✅ Found at \`$PLAN_DOC\`" || echo "❌ Missing")
                
                **Current Phase**: Implementation
                
                **Action Required**: Complete missing prerequisites first
                
                **Recovery Options:**
                - Missing research: '@claude retry research'
                - Missing plan: '@claude retry planning' 
                - Both missing: '@claude restart pipeline'
                "
                exit 1
              fi
              
              echo "research_doc_path=$RESEARCH_DOC" >> $GITHUB_OUTPUT
              echo "plan_doc_path=$PLAN_DOC" >> $GITHUB_OUTPUT
              echo "✅ All required documents found for implementation"
              ;;
              
            "pr-creation")
              # PR creation needs all documents plus implementation
              RESEARCH_DOC=$(find "$THOUGHTS_DIR/shared/research" -name "*issue-${{ inputs.issue_number }}*" -type f | head -1)
              PLAN_DOC=$(find "$THOUGHTS_DIR/shared/plans" -name "*issue-${{ inputs.issue_number }}*" -type f | head -1)
              
              if [ -z "$RESEARCH_DOC" ] || [ -z "$PLAN_DOC" ]; then
                echo "❌ PR creation requires all pipeline documents"
                INTEGRITY="incomplete_pipeline"
                exit 1
              fi
              
              # Check that implementation actually happened
              BASE_BRANCH="main"
              if [ -f ".github/development-pipeline-config.yml" ]; then
                BASE_BRANCH=$(yq eval '.base_branch' ".github/development-pipeline-config.yml" 2>/dev/null || echo "main")
              fi
              
              COMMITS_AHEAD=$(git rev-list --count HEAD ^origin/$BASE_BRANCH 2>/dev/null || echo "0")
              if [ "$COMMITS_AHEAD" -eq 0 ]; then
                echo "❌ No implementation commits found"
                INTEGRITY="no_implementation"
                gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
                ❌ **Context Error: No Implementation Found**
                
                PR creation phase reached but no implementation commits were found.
                
                **Current State**: Branch has no commits ahead of base
                **Expected**: Implementation commits with code changes
                
                **This Usually Means:**
                - Implementation phase was not completed
                - Implementation commits were lost or reverted
                - Branch was reset incorrectly
                
                **Action Required**: Complete implementation first
                - '@claude retry implementation' - Retry implementation
                - '@claude restart pipeline' - Start over completely
                "
                exit 1
              fi
              
              echo "research_doc_path=$RESEARCH_DOC" >> $GITHUB_OUTPUT
              echo "plan_doc_path=$PLAN_DOC" >> $GITHUB_OUTPUT
              echo "✅ All required documents and implementation found for PR creation"
              ;;
          esac
          
          echo "integrity=$INTEGRITY" >> $GITHUB_OUTPUT

      - name: Validate Document Integrity
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          DECISION_RECORD="${{ steps.context.outputs.decision_record_path }}"
          
          # Check decision record has required structure
          REQUIRED_SECTIONS=("## Issue Context" "## Current Status")
          MISSING_SECTIONS=""
          
          for section in "${REQUIRED_SECTIONS[@]}"; do
            if ! grep -q "$section" "$DECISION_RECORD"; then
              echo "❌ Decision record missing section: $section"
              MISSING_SECTIONS="$MISSING_SECTIONS- $section\n"
            fi
          done
          
          if [ -n "$MISSING_SECTIONS" ]; then
            gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
            ❌ **Context Error: Malformed Decision Record**
            
            Decision record is missing required sections:
            $MISSING_SECTIONS
            
            **Decision Record**: \`$DECISION_RECORD\`
            
            This indicates the decision record was corrupted or manually edited incorrectly.
            
            **Action Required**: 
            - Review and fix the decision record manually
            - Or restart the pipeline: '@claude restart pipeline'
            
            **Expected Structure:**
            - ## Issue Context
            - ## Current Status  
            - ## Pipeline Configuration
            - Phase sections (Research, Planning, etc.)
            "
            exit 1
          fi
          
          echo "✅ Decision record structure validated"

      - name: Check Document Synchronization
        run: |
          CURRENT_PHASE="${{ steps.context.outputs.current_phase }}"
          DECISION_RECORD="${{ steps.context.outputs.decision_record_path }}"
          
          # Verify decision record reflects current phase state
          case "$CURRENT_PHASE" in
            "research")
              if ! grep -q "Research Phase.*In Progress\|Research Phase.*Starting" "$DECISION_RECORD"; then
                echo "⚠️ Decision record may be out of sync with current research phase"
              fi
              ;;
            "planning")
              if ! grep -q "Research Phase.*Complete" "$DECISION_RECORD"; then
                echo "⚠️ Decision record shows planning phase but research not marked complete"
              fi
              ;;
            "implementation")  
              if ! grep -q "Planning Phase.*Complete" "$DECISION_RECORD"; then
                echo "⚠️ Decision record shows implementation phase but planning not marked complete"
              fi
              ;;
          esac
          
          echo "✅ Document synchronization verified"

  # Error recovery mechanisms
  retry-research:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude retry research')
    needs: [validate-branch-continuity, validate-context-continuity]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          
      - name: Checkout pipeline branch
        run: |
          BRANCH_NAME="${{ needs.validate-branch-continuity.outputs.branch_name }}"
          git checkout "$BRANCH_NAME"
          git pull origin "$BRANCH_NAME"

      - name: Reset research phase in decision record
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          DECISION_RECORD="${{ needs.validate-context-continuity.outputs.decision_record_path }}"
          
          # Remove any existing research completion markers
          sed -i '/### Research Phase (Complete ✅)/,/^$/d' "$DECISION_RECORD"
          
          # Add new research phase section
          cat >> "$DECISION_RECORD" << EOF
          
          ### Research Phase (Retry - $(date -Iseconds))
          - **Status**: Restarting research phase
          - **Reason**: Manual retry requested
          - **Previous attempts preserved in git history
          
          EOF
          
          # Commit the update
          git config user.name "Pipeline Bot"
          git config user.email "pipeline@atriumn.com"
          git add "$DECISION_RECORD"
          git commit -m "Pipeline: Reset research phase for retry on issue #${{ inputs.issue_number }}"
          git push origin "${{ needs.validate-branch-continuity.outputs.branch_name }}"

      - name: Trigger research retry
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          BRANCH_NAME="${{ needs.validate-branch-continuity.outputs.branch_name }}"
          
          # Get thoughts directory from config
          THOUGHTS_DIR="thoughts/"
          if [ -f ".github/development-pipeline-config.yml" ]; then
            THOUGHTS_DIR=$(yq eval '.thoughts_directory' ".github/development-pipeline-config.yml" 2>/dev/null || echo "thoughts/")
          fi
          
          gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
          🔄 **Research Phase Retry Initiated**
          
          **Action**: Research phase has been reset and is ready for retry
          **Branch**: \`$BRANCH_NAME\`
          **Previous Work**: Preserved in git history
          
          ---
          
          @claude Please retry the research phase for this issue:
          
          **CRITICAL: Use this exact branch for all work**
          - Branch: \`$BRANCH_NAME\`
          - Command: \`git checkout $BRANCH_NAME\`
          - DO NOT create a new branch
          
          **Context File**: \`$THOUGHTS_DIR/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md\`
          
          **Research Requirements:**
          - Review any previous research attempts in git history
          - Address any validation issues from previous attempts
          - Create NEW research document: \`$THOUGHTS_DIR/shared/research/$(date +%Y-%m-%d_%H-%M-%S)_issue-${{ inputs.issue_number }}_retry.md\`
          - Include YAML frontmatter with metadata
          - Update the decision record with findings
          - Commit both documents to the same branch: \`$BRANCH_NAME\`
          
          **Focus on fixing previous issues:**
          - Ensure all required sections are present
          - Include minimum 3 file references with line numbers
          - Valid YAML frontmatter structure
          - Comprehensive research addressing the issue
          
          **Git Operations:**
          \`\`\`bash
          git checkout $BRANCH_NAME
          git pull origin $BRANCH_NAME
          git add $THOUGHTS_DIR/shared/research/[filename].md
          git add $THOUGHTS_DIR/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md
          git commit -m \"Research Retry: Issue #${{ inputs.issue_number }} analysis\"
          git push origin $BRANCH_NAME
          \`\`\`
          "

  restart-pipeline:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude restart pipeline')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0

      - name: Get existing pipeline branch
        id: existing-branch
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          # Look for existing pipeline branch
          EXISTING_BRANCH=$(gh issue view ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --json labels --jq '.labels[] | select(.name | startswith("branch:")) | .name | sub("branch:"; "")')
          
          if [ -n "$EXISTING_BRANCH" ]; then
            echo "existing_branch=$EXISTING_BRANCH" >> $GITHUB_OUTPUT
            echo "✅ Found existing pipeline branch: $EXISTING_BRANCH"
          else
            echo "No existing pipeline branch found"
          fi

      - name: Archive existing work
        if: steps.existing-branch.outputs.existing_branch != ''
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          EXISTING_BRANCH="${{ steps.existing-branch.outputs.existing_branch }}"
          ARCHIVE_BRANCH="archive-$EXISTING_BRANCH-$(date +%Y%m%d-%H%M%S)"
          
          # Create archive branch from existing work
          if git ls-remote --heads origin "$EXISTING_BRANCH" | grep -q "$EXISTING_BRANCH"; then
            git fetch origin "$EXISTING_BRANCH"
            git checkout "$EXISTING_BRANCH"
            git checkout -b "$ARCHIVE_BRANCH"
            git push origin "$ARCHIVE_BRANCH"
            
            # Remove old branch label and add archive label
            gh label delete "branch:$EXISTING_BRANCH" --repo ${{ inputs.repo_name }} || true
            gh label create "archived:$ARCHIVE_BRANCH" --color "6f42c1" --description "Archived pipeline branch" --repo ${{ inputs.repo_name }} || true
            gh issue edit ${{ inputs.issue_number }} --add-label "archived:$ARCHIVE_BRANCH" --repo ${{ inputs.repo_name }}
            
            echo "✅ Archived existing work to branch: $ARCHIVE_BRANCH"
          fi

      - name: Restart pipeline
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
          🔄 **Pipeline Restart Initiated**
          
          **Action**: Pipeline is being completely restarted
          **Previous Work**: $([ -n "${{ steps.existing-branch.outputs.existing_branch }}" ] && echo "Archived to \`archive-${{ steps.existing-branch.outputs.existing_branch }}-$(date +%Y%m%d-%H%M%S)\`" || echo "No previous work found")
          **Fresh Start**: New branch and decision record will be created
          
          ---
          
          @claude run development pipeline
          Human validation: true
          Base branch: main
          
          This is a fresh restart of the development pipeline.
          "

  handle-validation-failure:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude fix validation')
    needs: [validate-branch-continuity, validate-context-continuity]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          
      - name: Checkout pipeline branch
        run: |
          BRANCH_NAME="${{ needs.validate-branch-continuity.outputs.branch_name }}"
          git checkout "$BRANCH_NAME"
          git pull origin "$BRANCH_NAME"

      - name: Diagnose validation issues
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          CURRENT_PHASE="${{ needs.validate-context-continuity.outputs.current_phase }}"
          
          # Get thoughts directory from config
          THOUGHTS_DIR="thoughts/"
          if [ -f ".github/development-pipeline-config.yml" ]; then
            THOUGHTS_DIR=$(yq eval '.thoughts_directory' ".github/development-pipeline-config.yml" 2>/dev/null || echo "thoughts/")
          fi
          
          DIAGNOSIS=""
          
          case "$CURRENT_PHASE" in
            "research")
              # Check for research documents
              RESEARCH_COUNT=$(find "$THOUGHTS_DIR/shared/research" -name "*issue-${{ inputs.issue_number }}*" -type f | wc -l)
              if [ "$RESEARCH_COUNT" -eq 0 ]; then
                DIAGNOSIS="$DIAGNOSIS- No research document found\n"
              else
                RESEARCH_DOC=$(find "$THOUGHTS_DIR/shared/research" -name "*issue-${{ inputs.issue_number }}*" -type f | head -1)
                if [ ! -f "$RESEARCH_DOC" ]; then
                  DIAGNOSIS="$DIAGNOSIS- Research document path issue\n"
                else
                  # Check YAML frontmatter
                  if ! head -20 "$RESEARCH_DOC" | grep -q "^---$"; then
                    DIAGNOSIS="$DIAGNOSIS- Missing YAML frontmatter\n"
                  fi
                  # Check file references
                  FILE_REFS=$(grep -c '`[^`]*\.[a-z]*:' "$RESEARCH_DOC" 2>/dev/null || echo "0")
                  if [ "$FILE_REFS" -lt 3 ]; then
                    DIAGNOSIS="$DIAGNOSIS- Insufficient file references ($FILE_REFS found, need 3+)\n"
                  fi
                fi
              fi
              ;;
            "planning")
              # Check for planning documents
              PLAN_COUNT=$(find "$THOUGHTS_DIR/shared/plans" -name "*issue-${{ inputs.issue_number }}*" -type f | wc -l)
              if [ "$PLAN_COUNT" -eq 0 ]; then
                DIAGNOSIS="$DIAGNOSIS- No implementation plan found\n"
              fi
              ;;
          esac
          
          gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
          🔧 **Validation Failure Diagnosis**
          
          **Current Phase**: $CURRENT_PHASE
          **Branch**: \`${{ needs.validate-branch-continuity.outputs.branch_name }}\`
          
          **Issues Found:**
          $DIAGNOSIS
          
          **Recommended Actions:**
          - Review the specific validation errors above
          - Check that documents are committed to the correct branch
          - Ensure YAML frontmatter is properly formatted
          - Verify file references include line numbers (e.g., \`file.js:123\`)
          - For research: minimum 3 file references required
          
          **Recovery Options:**
          - '@claude retry research' - Restart research phase
          - '@claude retry planning' - Restart planning phase (if applicable)
          - '@claude restart pipeline' - Complete fresh start
          
          **Manual Fix**: You can also manually fix the validation issues and retry the validation.
          "

  # Partial completion handling (75%-25% scenario)
  detect-partial-completion:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude check completion')
    needs: [validate-branch-continuity, validate-context-continuity]
    runs-on: ubuntu-latest
    outputs:
      completion_status: ${{ steps.analyze.outputs.completion_status }}
      completion_percentage: ${{ steps.analyze.outputs.completion_percentage }}
      remaining_work: ${{ steps.analyze.outputs.remaining_work }}
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          
      - name: Checkout pipeline branch
        run: |
          BRANCH_NAME="${{ needs.validate-branch-continuity.outputs.branch_name }}"
          git checkout "$BRANCH_NAME"
          git pull origin "$BRANCH_NAME"

      - name: Analyze completion status
        id: analyze
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          CURRENT_PHASE="${{ needs.validate-context-continuity.outputs.current_phase }}"
          DECISION_RECORD="${{ needs.validate-context-continuity.outputs.decision_record_path }}"
          
          # Count completed phases
          COMPLETED_PHASES=0
          TOTAL_PHASES=4  # research, planning, implementation, pr-creation
          
          if grep -q "Research Phase.*Complete" "$DECISION_RECORD"; then
            COMPLETED_PHASES=$((COMPLETED_PHASES + 1))
          fi
          
          if grep -q "Planning Phase.*Complete" "$DECISION_RECORD"; then
            COMPLETED_PHASES=$((COMPLETED_PHASES + 1))
          fi
          
          if grep -q "Implementation Phase.*Complete" "$DECISION_RECORD"; then
            COMPLETED_PHASES=$((COMPLETED_PHASES + 1))
          fi
          
          # Check if PR exists
          PR_EXISTS="false"
          if gh pr list --repo ${{ inputs.repo_name }} --head "${{ needs.validate-branch-continuity.outputs.branch_name }}" --json number | grep -q "number"; then
            COMPLETED_PHASES=$((COMPLETED_PHASES + 1))
            PR_EXISTS="true"
          fi
          
          # Calculate percentage
          COMPLETION_PERCENTAGE=$((COMPLETED_PHASES * 100 / TOTAL_PHASES))
          
          # Determine status
          if [ "$COMPLETION_PERCENTAGE" -eq 100 ]; then
            STATUS="complete"
          elif [ "$COMPLETION_PERCENTAGE" -ge 75 ]; then
            STATUS="mostly_complete"
          elif [ "$COMPLETION_PERCENTAGE" -ge 50 ]; then
            STATUS="halfway"
          elif [ "$COMPLETION_PERCENTAGE" -ge 25 ]; then
            STATUS="partial"
          else
            STATUS="minimal"
          fi
          
          # Identify remaining work
          REMAINING=""
          if ! grep -q "Research Phase.*Complete" "$DECISION_RECORD"; then
            REMAINING="$REMAINING- Research phase\n"
          fi
          if ! grep -q "Planning Phase.*Complete" "$DECISION_RECORD"; then
            REMAINING="$REMAINING- Planning phase\n"
          fi
          if ! grep -q "Implementation Phase.*Complete" "$DECISION_RECORD"; then
            REMAINING="$REMAINING- Implementation phase\n"
          fi
          if [ "$PR_EXISTS" = "false" ]; then
            REMAINING="$REMAINING- Pull request creation\n"
          fi
          
          echo "completion_status=$STATUS" >> $GITHUB_OUTPUT
          echo "completion_percentage=$COMPLETION_PERCENTAGE" >> $GITHUB_OUTPUT
          echo "remaining_work=$REMAINING" >> $GITHUB_OUTPUT
          
          echo "✅ Completion analysis: $COMPLETION_PERCENTAGE% ($STATUS)"

      - name: Report completion status
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          COMPLETION="${{ steps.analyze.outputs.completion_percentage }}"
          STATUS="${{ steps.analyze.outputs.completion_status }}"
          REMAINING="${{ steps.analyze.outputs.remaining_work }}"
          
          gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
          📊 **Pipeline Completion Analysis**
          
          **Overall Progress**: $COMPLETION% complete
          **Status**: $STATUS
          **Branch**: \`${{ needs.validate-branch-continuity.outputs.branch_name }}\`
          
          **Remaining Work:**
          $REMAINING
          
          **Current Phase**: ${{ needs.validate-context-continuity.outputs.current_phase }}
          **Decision Record**: \`${{ needs.validate-context-continuity.outputs.decision_record_path }}\`
          
          **Next Actions:**
          - Continue with current phase if in progress
          - '@claude continue pipeline' to resume from current point
          - '@claude restart pipeline' for fresh start if needed
          
          **Phase Status Details:**
          - Research: $(grep -q "Research Phase.*Complete" "${{ needs.validate-context-continuity.outputs.decision_record_path }}" && echo "✅ Complete" || echo "⏳ Pending")
          - Planning: $(grep -q "Planning Phase.*Complete" "${{ needs.validate-context-continuity.outputs.decision_record_path }}" && echo "✅ Complete" || echo "⏳ Pending")
          - Implementation: $(grep -q "Implementation Phase.*Complete" "${{ needs.validate-context-continuity.outputs.decision_record_path }}" && echo "✅ Complete" || echo "⏳ Pending")
          - Pull Request: $(gh pr list --repo ${{ inputs.repo_name }} --head "${{ needs.validate-branch-continuity.outputs.branch_name }}" --json number | grep -q "number" && echo "✅ Created" || echo "⏳ Pending")
          "

  handle-partial-completion:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude continue pipeline')
    needs: [validate-branch-continuity, validate-context-continuity]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          
      - name: Checkout pipeline branch
        run: |
          BRANCH_NAME="${{ needs.validate-branch-continuity.outputs.branch_name }}"
          git checkout "$BRANCH_NAME"
          git pull origin "$BRANCH_NAME"

      - name: Continue from current phase
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          CURRENT_PHASE="${{ needs.validate-context-continuity.outputs.current_phase }}"
          BRANCH_NAME="${{ needs.validate-branch-continuity.outputs.branch_name }}"
          
          # Get thoughts directory from config
          THOUGHTS_DIR="thoughts/"
          if [ -f ".github/development-pipeline-config.yml" ]; then
            THOUGHTS_DIR=$(yq eval '.thoughts_directory' ".github/development-pipeline-config.yml" 2>/dev/null || echo "thoughts/")
          fi
          
          case "$CURRENT_PHASE" in
            "research")
              gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
              🔄 **Continuing Pipeline from Research Phase**
              
              **Current Phase**: Research
              **Branch**: \`$BRANCH_NAME\`
              
              ---
              
              @claude Please continue with the research phase for this issue:
              
              **Context**: Read the decision record to understand what has been done so far:
              \`$THOUGHTS_DIR/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md\`
              
              **CRITICAL: Use this exact branch for all work**
              - Branch: \`$BRANCH_NAME\`
              - Command: \`git checkout $BRANCH_NAME\`
              
              Continue with research requirements as outlined in the pipeline documentation.
              "
              ;;
            "planning")
              gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
              🔄 **Continuing Pipeline from Planning Phase**
              
              **Current Phase**: Planning
              **Branch**: \`$BRANCH_NAME\`
              
              ---
              
              @claude Please continue with the planning phase for this issue:
              
              **Context**: Read the complete pipeline context:
              \`$THOUGHTS_DIR/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md\`
              
              **Research Available**: Review the research document that has been completed
              **CRITICAL: Use this exact branch**: \`$BRANCH_NAME\`
              
              Continue with implementation planning as outlined in the pipeline documentation.
              "
              ;;
            "implementation")
              gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
              🔄 **Continuing Pipeline from Implementation Phase**
              
              **Current Phase**: Implementation
              **Branch**: \`$BRANCH_NAME\`
              
              ---
              
              @claude Please continue with the implementation phase for this issue:
              
              **Context**: Read the complete pipeline context and plan:
              \`$THOUGHTS_DIR/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md\`
              
              **Plan Available**: Review the implementation plan that has been completed
              **CRITICAL: Use this exact branch**: \`$BRANCH_NAME\`
              
              Continue with code implementation as outlined in the plan.
              "
              ;;
            "pr-creation")
              gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
              🔄 **Continuing Pipeline from PR Creation Phase**
              
              **Current Phase**: PR Creation
              **Branch**: \`$BRANCH_NAME\`
              
              ---
              
              @claude Please create the pull request for this implementation:
              
              **Context**: All phases completed, ready for PR creation
              **Branch**: \`$BRANCH_NAME\`
              **Implementation**: Review the code changes on this branch
              
              Create a comprehensive pull request with proper description based on the pipeline work.
              "
              ;;
            *)
              gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
              ⚠️ **Unknown Pipeline Phase**
              
              **Current Phase**: $CURRENT_PHASE
              **Branch**: \`$BRANCH_NAME\`
              
              Unable to determine next action. Please check the decision record or restart the pipeline:
              - '@claude restart pipeline' for fresh start
              - '@claude check completion' for status analysis
              "
              ;;
          esac

  continue-partial-implementation:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude continue implementation')
    needs: [validate-branch-continuity, validate-context-continuity]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          
      - name: Checkout pipeline branch
        run: |
          BRANCH_NAME="${{ needs.validate-branch-continuity.outputs.branch_name }}"
          git checkout "$BRANCH_NAME"
          git pull origin "$BRANCH_NAME"

      - name: Assess implementation progress
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          BRANCH_NAME="${{ needs.validate-branch-continuity.outputs.branch_name }}"
          
          # Check base branch
          BASE_BRANCH="main"
          if [ -f ".github/development-pipeline-config.yml" ]; then
            BASE_BRANCH=$(yq eval '.base_branch' ".github/development-pipeline-config.yml" 2>/dev/null || echo "main")
          fi
          
          # Get commit count
          COMMITS_AHEAD=$(git rev-list --count HEAD ^origin/$BASE_BRANCH 2>/dev/null || echo "0")
          COMMITS_AHEAD=$(echo "$COMMITS_AHEAD" | head -1 | tr -d '\n\r ')
          
          # Get file changes
          CHANGED_FILES=$(git diff --name-only origin/$BASE_BRANCH...HEAD | wc -l)
          CHANGED_FILES=$(echo "$CHANGED_FILES" | head -1 | tr -d '\n\r ')
          
          # Get thoughts directory
          THOUGHTS_DIR="thoughts/"
          if [ -f ".github/development-pipeline-config.yml" ]; then
            THOUGHTS_DIR=$(yq eval '.thoughts_directory' ".github/development-pipeline-config.yml" 2>/dev/null || echo "thoughts/")
          fi
          
          gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
          🔄 **Continuing Implementation (75%-25% Scenario)**
          
          **Branch**: \`$BRANCH_NAME\`
          **Current Progress**: $COMMITS_AHEAD commits, $CHANGED_FILES files changed
          
          ---
          
          @claude Please continue the implementation for this issue:
          
          **Context**: Implementation is partially complete
          **Pipeline Context**: Read the complete context from:
          \`$THOUGHTS_DIR/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md\`
          
          **Implementation Plan**: Review the plan at:
          \`$THOUGHTS_DIR/shared/plans/issue-${{ inputs.issue_number }}-implementation.md\`
          
          **CRITICAL: Use this exact branch for all work**
          - Branch: \`$BRANCH_NAME\`
          - Command: \`git checkout $BRANCH_NAME\`
          - DO NOT create a new branch
          
          **Current State Assessment:**
          - Review existing commits and code changes
          - Check what has been implemented vs the plan
          - Identify remaining work from the success criteria
          - Continue implementation from where it was left off
          
          **When Implementation is Complete:**
          - Update decision record with implementation status
          - Comment '✅ Implementation Phase Complete' to trigger validation
          
          **Git Operations:**
          \`\`\`bash
          git checkout $BRANCH_NAME
          git pull origin $BRANCH_NAME
          # ... continue implementation work ...
          git add .
          git commit -m \"Continue implementation: Issue #${{ inputs.issue_number }}\"
          git push origin $BRANCH_NAME
          \`\`\`
          
          Please assess the current state and continue implementation according to the plan.
          "

  # Decision record size management
  manage-decision-record-size:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude optimize decision record')
    needs: [validate-branch-continuity, validate-context-continuity]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          
      - name: Checkout pipeline branch
        run: |
          BRANCH_NAME="${{ needs.validate-branch-continuity.outputs.branch_name }}"
          git checkout "$BRANCH_NAME"
          git pull origin "$BRANCH_NAME"

      - name: Analyze decision record size
        id: analyze
        run: |
          DECISION_RECORD="${{ needs.validate-context-continuity.outputs.decision_record_path }}"
          
          if [ ! -f "$DECISION_RECORD" ]; then
            echo "❌ Decision record not found"
            exit 1
          fi
          
          # Get file size and line count
          FILE_SIZE=$(wc -c < "$DECISION_RECORD")
          LINE_COUNT=$(wc -l < "$DECISION_RECORD")
          
          echo "size_bytes=$FILE_SIZE" >> $GITHUB_OUTPUT
          echo "line_count=$LINE_COUNT" >> $GITHUB_OUTPUT
          
          # Determine if optimization is needed
          if [ "$FILE_SIZE" -gt 50000 ] || [ "$LINE_COUNT" -gt 1000 ]; then
            echo "needs_optimization=true" >> $GITHUB_OUTPUT
            echo "⚠️ Decision record is large: $FILE_SIZE bytes, $LINE_COUNT lines"
          else
            echo "needs_optimization=false" >> $GITHUB_OUTPUT
            echo "✅ Decision record size is manageable: $FILE_SIZE bytes, $LINE_COUNT lines"
          fi

      - name: Create archive if needed
        if: steps.analyze.outputs.needs_optimization == 'true'
        run: |
          DECISION_RECORD="${{ needs.validate-context-continuity.outputs.decision_record_path }}"
          ARCHIVE_FILE="${DECISION_RECORD%.md}_archive_$(date +%Y%m%d_%H%M%S).md"
          
          # Create archive copy
          cp "$DECISION_RECORD" "$ARCHIVE_FILE"
          
          echo "✅ Created archive: $ARCHIVE_FILE"
          echo "archive_file=$ARCHIVE_FILE" >> $GITHUB_OUTPUT

      - name: Optimize decision record
        if: steps.analyze.outputs.needs_optimization == 'true'
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          DECISION_RECORD="${{ needs.validate-context-continuity.outputs.decision_record_path }}"
          OPTIMIZED_FILE="${DECISION_RECORD%.md}_optimized.md"
          
          # Create optimized version with essential information only
          cat > "$OPTIMIZED_FILE" << 'EOF'
          # Pipeline Decision Record - Issue #${{ inputs.issue_number }} (Optimized)
          
          > **Note**: This is an optimized version. Full history archived in git and archive file.
          
          ## Issue Context
          EOF
          
          # Extract essential sections
          sed -n '/^## Issue Context/,/^## [^I]/p' "$DECISION_RECORD" | head -n -1 >> "$OPTIMIZED_FILE"
          
          cat >> "$OPTIMIZED_FILE" << 'EOF'
          
          ## Current Status
          EOF
          
          sed -n '/^## Current Status/,/^## [^C]/p' "$DECISION_RECORD" | head -n -1 >> "$OPTIMIZED_FILE"
          
          cat >> "$OPTIMIZED_FILE" << 'EOF'
          
          ## Pipeline Configuration
          EOF
          
          sed -n '/^## Pipeline Configuration/,/^## [^P]/p' "$DECISION_RECORD" | head -n -1 >> "$OPTIMIZED_FILE"
          
          # Add summary of completed phases
          cat >> "$OPTIMIZED_FILE" << 'EOF'
          
          ## Phase Summary
          EOF
          
          # Extract only completion markers for each phase
          grep -A 2 "Phase.*Complete" "$DECISION_RECORD" >> "$OPTIMIZED_FILE" || true
          
          cat >> "$OPTIMIZED_FILE" << 'EOF'
          
          ---
          
          **Optimization Details:**
          - Original size: ${{ steps.analyze.outputs.size_bytes }} bytes, ${{ steps.analyze.outputs.line_count }} lines
          - Optimized on: $(date -Iseconds)
          - Full history available in git log and archive file
          - Archive: $(basename "$ARCHIVE_FILE")
          
          EOF
          
          # Replace original with optimized version
          mv "$OPTIMIZED_FILE" "$DECISION_RECORD"
          
          # Commit changes
          git config user.name "Pipeline Bot"
          git config user.email "pipeline@atriumn.com"
          git add "$DECISION_RECORD" "$ARCHIVE_FILE"
          git commit -m "Pipeline: Optimize decision record size for issue #${{ inputs.issue_number }}"
          git push origin "${{ needs.validate-branch-continuity.outputs.branch_name }}"
          
          echo "✅ Decision record optimized and committed"

      - name: Report optimization results
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          if [ "${{ steps.analyze.outputs.needs_optimization }}" = "true" ]; then
            NEW_SIZE=$(wc -c < "${{ needs.validate-context-continuity.outputs.decision_record_path }}")
            SAVINGS=$((${{ steps.analyze.outputs.size_bytes }} - NEW_SIZE))
            
            gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
            📝 **Decision Record Optimized**
            
            **Original Size**: ${{ steps.analyze.outputs.size_bytes }} bytes (${{ steps.analyze.outputs.line_count }} lines)
            **Optimized Size**: $NEW_SIZE bytes
            **Space Saved**: $SAVINGS bytes
            
            **Changes Made:**
            - Archived full history to separate file
            - Kept essential sections: Issue Context, Current Status, Pipeline Configuration
            - Summarized completed phases
            - All detailed history preserved in git log
            
            **Files:**
            - Optimized record: \`${{ needs.validate-context-continuity.outputs.decision_record_path }}\`
            - Archive: \`$(basename \"$ARCHIVE_FILE\")\`
            
            **Note**: Full context is still available through git history and archive file.
            "
          else
            gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
            📝 **Decision Record Size Check**
            
            **Current Size**: ${{ steps.analyze.outputs.size_bytes }} bytes (${{ steps.analyze.outputs.line_count }} lines)
            **Status**: ✅ Size is manageable, no optimization needed
            
            **Threshold**: 50,000 bytes or 1,000 lines
            **Action**: No action required at this time
            "
          fi

  # Phase transition safety checks
  validate-phase-transition:
    if: github.event_name == 'issue_comment' && (contains(github.event.comment.body, '✅ Research Phase Complete') || contains(github.event.comment.body, '✅ Planning Phase Complete') || contains(github.event.comment.body, '✅ Implementation Phase Complete'))
    needs: [validate-branch-continuity, validate-context-continuity]
    runs-on: ubuntu-latest
    outputs:
      transition_safe: ${{ steps.validate.outputs.transition_safe }}
      current_phase: ${{ steps.validate.outputs.current_phase }}
      next_phase: ${{ steps.validate.outputs.next_phase }}
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          
      - name: Checkout pipeline branch
        run: |
          BRANCH_NAME="${{ needs.validate-branch-continuity.outputs.branch_name }}"
          git checkout "$BRANCH_NAME"
          git pull origin "$BRANCH_NAME"

      - name: Validate phase transition
        id: validate
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          DECISION_RECORD="${{ needs.validate-context-continuity.outputs.decision_record_path }}"
          COMMENT="${{ github.event.comment.body }}"
          
          # Determine which phase is being completed
          if echo "$COMMENT" | grep -q "Research Phase Complete"; then
            COMPLETING_PHASE="research"
            NEXT_PHASE="planning"
          elif echo "$COMMENT" | grep -q "Planning Phase Complete"; then
            COMPLETING_PHASE="planning"
            NEXT_PHASE="implementation"
          elif echo "$COMMENT" | grep -q "Implementation Phase Complete"; then
            COMPLETING_PHASE="implementation"
            NEXT_PHASE="pr-creation"
          else
            echo "❌ Unknown phase transition"
            exit 1
          fi
          
          echo "current_phase=$COMPLETING_PHASE" >> $GITHUB_OUTPUT
          echo "next_phase=$NEXT_PHASE" >> $GITHUB_OUTPUT
          
          # Get thoughts directory from config
          THOUGHTS_DIR="thoughts/"
          if [ -f ".github/development-pipeline-config.yml" ]; then
            THOUGHTS_DIR=$(yq eval '.thoughts_directory' ".github/development-pipeline-config.yml" 2>/dev/null || echo "thoughts/")
          fi
          
          TRANSITION_SAFE="true"
          ISSUES=""
          
          case "$COMPLETING_PHASE" in
            "research")
              # Validate research completion requirements
              RESEARCH_DOC=$(find "$THOUGHTS_DIR/shared/research" -name "*issue-${{ inputs.issue_number }}*" -type f | head -1)
              if [ -z "$RESEARCH_DOC" ]; then
                TRANSITION_SAFE="false"
                ISSUES="$ISSUES- No research document found\n"
              else
                # Check if research was properly validated
                if ! grep -q "Research Phase.*Complete" "$DECISION_RECORD"; then
                  TRANSITION_SAFE="false"
                  ISSUES="$ISSUES- Research phase not marked complete in decision record\n"
                fi
                
                # Check basic research document quality
                FILE_REFS=$(grep -c '`[^`]*\.[a-z]*:' "$RESEARCH_DOC" 2>/dev/null || echo "0")
                if [ "$FILE_REFS" -lt 3 ]; then
                  TRANSITION_SAFE="false"
                  ISSUES="$ISSUES- Insufficient file references in research ($FILE_REFS found, need 3+)\n"
                fi
                
                # Check YAML frontmatter
                if ! head -20 "$RESEARCH_DOC" | grep -q "^---$"; then
                  TRANSITION_SAFE="false"
                  ISSUES="$ISSUES- Missing YAML frontmatter in research document\n"
                fi
              fi
              ;;
              
            "planning")
              # Validate planning completion requirements
              PLAN_DOC=$(find "$THOUGHTS_DIR/shared/plans" -name "*issue-${{ inputs.issue_number }}*" -type f | head -1)
              if [ -z "$PLAN_DOC" ]; then
                TRANSITION_SAFE="false"
                ISSUES="$ISSUES- No implementation plan found\n"
              else
                # Check if planning was properly completed
                if ! grep -q "Planning Phase.*Complete" "$DECISION_RECORD"; then
                  TRANSITION_SAFE="false"
                  ISSUES="$ISSUES- Planning phase not marked complete in decision record\n"
                fi
                
                # Check for required plan sections
                if ! grep -q "## Success Criteria" "$PLAN_DOC"; then
                  TRANSITION_SAFE="false"
                  ISSUES="$ISSUES- Missing Success Criteria section in plan\n"
                fi
                
                if ! grep -q "## Implementation Phases" "$PLAN_DOC"; then
                  TRANSITION_SAFE="false"
                  ISSUES="$ISSUES- Missing Implementation Phases section in plan\n"
                fi
                
                # Check for unresolved questions
                if grep -q "TODO\|FIXME\|???" "$PLAN_DOC"; then
                  TRANSITION_SAFE="false"
                  ISSUES="$ISSUES- Plan contains unresolved TODOs or questions\n"
                fi
              fi
              
              # Ensure research prerequisites are met
              if ! grep -q "Research Phase.*Complete" "$DECISION_RECORD"; then
                TRANSITION_SAFE="false"
                ISSUES="$ISSUES- Research phase must be completed before planning\n"
              fi
              ;;
              
            "implementation")
              # Validate implementation completion requirements
              if ! grep -q "Implementation Phase.*Complete" "$DECISION_RECORD"; then
                TRANSITION_SAFE="false"
                ISSUES="$ISSUES- Implementation phase not marked complete in decision record\n"
              fi
              
              # Check that implementation actually happened
              BASE_BRANCH="main"
              if [ -f ".github/development-pipeline-config.yml" ]; then
                BASE_BRANCH=$(yq eval '.base_branch' ".github/development-pipeline-config.yml" 2>/dev/null || echo "main")
              fi
              
              COMMITS_AHEAD=$(git rev-list --count HEAD ^origin/$BASE_BRANCH 2>/dev/null || echo "0")
              if [ "$COMMITS_AHEAD" -eq 0 ]; then
                TRANSITION_SAFE="false"
                ISSUES="$ISSUES- No implementation commits found\n"
              fi
              
              # Ensure planning prerequisites are met
              if ! grep -q "Planning Phase.*Complete" "$DECISION_RECORD"; then
                TRANSITION_SAFE="false"
                ISSUES="$ISSUES- Planning phase must be completed before implementation\n"
              fi
              
              # Check for implementation plan
              PLAN_DOC=$(find "$THOUGHTS_DIR/shared/plans" -name "*issue-${{ inputs.issue_number }}*" -type f | head -1)
              if [ -z "$PLAN_DOC" ]; then
                TRANSITION_SAFE="false"
                ISSUES="$ISSUES- Implementation plan not found\n"
              fi
              ;;
          esac
          
          echo "transition_safe=$TRANSITION_SAFE" >> $GITHUB_OUTPUT
          
          if [ "$TRANSITION_SAFE" = "true" ]; then
            echo "✅ Phase transition validation passed: $COMPLETING_PHASE → $NEXT_PHASE"
          else
            echo "❌ Phase transition validation failed: $COMPLETING_PHASE → $NEXT_PHASE"
            echo "Issues: $ISSUES"
          fi

      - name: Handle successful transition
        if: steps.validate.outputs.transition_safe == 'true'
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          COMPLETING_PHASE="${{ steps.validate.outputs.current_phase }}"
          NEXT_PHASE="${{ steps.validate.outputs.next_phase }}"
          
          gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
          ✅ **Phase Transition Validated**
          
          **Transition**: $COMPLETING_PHASE → $NEXT_PHASE
          **Status**: Safe to proceed
          **Branch**: \`${{ needs.validate-branch-continuity.outputs.branch_name }}\`
          
          **Phase Safety Checks Passed:**
          - ✅ Required documents present
          - ✅ Decision record updated
          - ✅ Prerequisites completed
          - ✅ Quality standards met
          
          **Next Phase**: $NEXT_PHASE phase can now begin safely.
          "

      - name: Handle failed transition
        if: steps.validate.outputs.transition_safe == 'false'
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          COMPLETING_PHASE="${{ steps.validate.outputs.current_phase }}"
          NEXT_PHASE="${{ steps.validate.outputs.next_phase }}"
          
          # Get transition issues (would need to be calculated again or passed)
          THOUGHTS_DIR="thoughts/"
          if [ -f ".github/development-pipeline-config.yml" ]; then
            THOUGHTS_DIR=$(yq eval '.thoughts_directory' ".github/development-pipeline-config.yml" 2>/dev/null || echo "thoughts/")
          fi
          
          gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
          ❌ **Phase Transition Failed**
          
          **Attempted Transition**: $COMPLETING_PHASE → $NEXT_PHASE
          **Status**: ❌ Transition blocked due to safety issues
          **Branch**: \`${{ needs.validate-branch-continuity.outputs.branch_name }}\`
          
          **Issues Found:**
          \`\`\`
          $(echo \"Issues detected during transition validation\")
          \`\`\`
          
          **Action Required:**
          - Complete the current phase properly before proceeding
          - Ensure all required documents are present and valid
          - Update decision record to reflect completion
          - Address quality issues in phase deliverables
          
          **Recovery Options:**
          - Fix the issues and retry the phase completion
          - '@claude fix validation' for automated diagnosis
          - '@claude retry $COMPLETING_PHASE' to restart the current phase
          - '@claude restart pipeline' for complete fresh start
          
          **Current Phase**: $COMPLETING_PHASE (must be completed before proceeding)
          "
          
          exit 1

  # Comprehensive phase transition orchestrator
  orchestrate-phase-transition:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude advance phase')
    needs: [validate-branch-continuity, validate-context-continuity]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          
      - name: Checkout pipeline branch
        run: |
          BRANCH_NAME="${{ needs.validate-branch-continuity.outputs.branch_name }}"
          git checkout "$BRANCH_NAME"
          git pull origin "$BRANCH_NAME"

      - name: Determine current phase and next action
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          CURRENT_PHASE="${{ needs.validate-context-continuity.outputs.current_phase }}"
          DECISION_RECORD="${{ needs.validate-context-continuity.outputs.decision_record_path }}"
          BRANCH_NAME="${{ needs.validate-branch-continuity.outputs.branch_name }}"
          
          # Get thoughts directory from config
          THOUGHTS_DIR="thoughts/"
          if [ -f ".github/development-pipeline-config.yml" ]; then
            THOUGHTS_DIR=$(yq eval '.thoughts_directory' ".github/development-pipeline-config.yml" 2>/dev/null || echo "thoughts/")
          fi
          
          case "$CURRENT_PHASE" in
            "research")
              # Check if research is actually complete
              RESEARCH_DOC=$(find "$THOUGHTS_DIR/shared/research" -name "*issue-${{ inputs.issue_number }}*" -type f | head -1)
              if [ -n "$RESEARCH_DOC" ] && grep -q "Research Phase.*Complete" "$DECISION_RECORD"; then
                gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
                🔄 **Advancing from Research to Planning**
                
                **Current Status**: Research phase completed
                **Next Action**: Triggering planning phase
                **Branch**: \`$BRANCH_NAME\`
                
                ---
                
                ✅ Research Phase Complete
                "
              else
                gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
                ⚠️ **Research Phase Not Ready**
                
                **Current Phase**: Research
                **Status**: Research phase is not yet complete
                **Branch**: \`$BRANCH_NAME\`
                
                **Action Required**: Complete research phase first
                - Ensure research document exists and is committed
                - Update decision record with completion
                - Address any validation issues
                
                **To Complete Research**: Continue working on research and comment '✅ Research Phase Complete' when done
                "
              fi
              ;;
              
            "planning")
              # Check if planning is complete
              PLAN_DOC=$(find "$THOUGHTS_DIR/shared/plans" -name "*issue-${{ inputs.issue_number }}*" -type f | head -1)
              if [ -n "$PLAN_DOC" ] && grep -q "Planning Phase.*Complete" "$DECISION_RECORD"; then
                gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
                🔄 **Advancing from Planning to Implementation**
                
                **Current Status**: Planning phase completed
                **Next Action**: Triggering implementation phase
                **Branch**: \`$BRANCH_NAME\`
                
                ---
                
                ✅ Planning Phase Complete
                "
              else
                gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
                ⚠️ **Planning Phase Not Ready**
                
                **Current Phase**: Planning
                **Status**: Planning phase is not yet complete
                **Branch**: \`$BRANCH_NAME\`
                
                **Action Required**: Complete planning phase first
                - Ensure implementation plan exists and is committed
                - Update decision record with completion
                - Address any validation issues
                
                **To Complete Planning**: Continue working on plan and comment '✅ Planning Phase Complete' when done
                "
              fi
              ;;
              
            "implementation")
              # Check if implementation is complete
              BASE_BRANCH="main"
              if [ -f ".github/development-pipeline-config.yml" ]; then
                BASE_BRANCH=$(yq eval '.base_branch' ".github/development-pipeline-config.yml" 2>/dev/null || echo "main")
              fi
              
              COMMITS_AHEAD=$(git rev-list --count HEAD ^origin/$BASE_BRANCH 2>/dev/null || echo "0")
              if [ "$COMMITS_AHEAD" -gt 0 ] && grep -q "Implementation Phase.*Complete" "$DECISION_RECORD"; then
                gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
                🔄 **Advancing from Implementation to PR Creation**
                
                **Current Status**: Implementation phase completed
                **Next Action**: Triggering PR creation phase
                **Branch**: \`$BRANCH_NAME\`
                **Commits**: $COMMITS_AHEAD commits ahead of $BASE_BRANCH
                
                ---
                
                ✅ Implementation Phase Complete
                "
              else
                gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
                ⚠️ **Implementation Phase Not Ready**
                
                **Current Phase**: Implementation
                **Status**: Implementation phase is not yet complete
                **Branch**: \`$BRANCH_NAME\`
                **Commits**: $COMMITS_AHEAD commits ahead of $BASE_BRANCH
                
                **Action Required**: Complete implementation phase first
                - Ensure code changes are committed to branch
                - Update decision record with completion
                - Address any validation issues
                
                **To Complete Implementation**: Finish coding and comment '✅ Implementation Phase Complete' when done
                "
              fi
              ;;
              
            "pr-creation")
              # Check if PR already exists
              if gh pr list --repo ${{ inputs.repo_name }} --head "$BRANCH_NAME" --json number | grep -q "number"; then
                PR_URL=$(gh pr list --repo ${{ inputs.repo_name }} --head "$BRANCH_NAME" --json url --jq '.[0].url')
                gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
                ✅ **Pipeline Complete**
                
                **Current Status**: Pull request created
                **Pull Request**: $PR_URL
                **Branch**: \`$BRANCH_NAME\`
                
                **Pipeline Completion**: All phases completed successfully
                - ✅ Research Phase
                - ✅ Planning Phase  
                - ✅ Implementation Phase
                - ✅ Pull Request Created
                
                **Next Steps**: Review and merge the pull request
                "
              else
                gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
                🔄 **Ready for PR Creation**
                
                **Current Status**: Implementation complete, ready for PR
                **Branch**: \`$BRANCH_NAME\`
                
                ---
                
                @claude Please create a pull request for this implementation:
                
                **Context**: All phases completed successfully
                **Implementation**: Review the code changes on branch \`$BRANCH_NAME\`
                **Decision Record**: \`$THOUGHTS_DIR/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md\`
                **Implementation Plan**: Review the plan for PR description content
                
                Create a comprehensive pull request with:
                - Clear title referencing issue #${{ inputs.issue_number }}
                - Detailed description based on implementation plan
                - Link back to this issue
                - Summary of changes made
                "
              fi
              ;;
              
            *)
              gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
              ⚠️ **Unknown Pipeline Phase**
              
              **Current Phase**: $CURRENT_PHASE
              **Branch**: \`$BRANCH_NAME\`
              
              Unable to advance from unknown phase. Please check the decision record or restart the pipeline:
              - '@claude check completion' for status analysis
              - '@claude restart pipeline' for fresh start
              "
              ;;
          esac