name: Development Pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
        description: 'Repository name for configuration lookup'
      issue_number:
        required: false
        type: string
        description: 'Issue number if called from issue context'
      branch_name:
        required: false
        type: string
        description: 'Optional branch name override'
      pipeline_id:
        required: false
        type: string
        description: 'Optional pipeline ID for tracking'
      human_validation:
        required: false
        type: boolean
        default: true
        description: 'Enable human validation between phases'
      test_mode:
        required: false
        type: boolean
        default: false
        description: 'Run in test mode'
      trigger_comment:
        required: false
        type: string
        description: 'The comment body that triggered this workflow'
    secrets:
      REPO_TOKEN:
        required: true
        description: 'GitHub token with repository access'

  # Direct repository dispatch (more efficient than issue_comment)
  repository_dispatch:
    types: [pipeline-start, research-complete, approve-research, planning-complete, approve-plan, implementation-complete]

  # For testing - remove in production
  workflow_dispatch:
    inputs:
      repo_name:
        required: true
        type: string
      issue_number:
        required: true
        type: string

jobs:
  # Enhanced configuration loading job
  load-and-validate-config:
    runs-on: ubuntu-latest
    outputs:
      config: ${{ steps.config.outputs.config }}
      config_source: ${{ steps.config.outputs.config_source }}
      base_branch: ${{ steps.config.outputs.base_branch }}
      thoughts_dir: ${{ steps.config.outputs.thoughts_dir }}
      branch_prefix: ${{ steps.config.outputs.branch_prefix }}
      validation_config: ${{ steps.config.outputs.validation_config }}
      team_config: ${{ steps.config.outputs.team_config }}
      workflow_config: ${{ steps.config.outputs.workflow_config }}
    steps:
      - name: Checkout shared workflows
        uses: actions/checkout@v4
        with:
          repository: atriumn/atriumn-shared-workflows
          path: shared-workflows
          
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          path: target-repo
          
      - name: Install configuration validator
        run: |
          # Install yq for YAML processing and python for validation
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          pip install jsonschema pyyaml

      - name: Load and validate configuration
        id: config
        run: |
          cd target-repo
          
          # Try multiple configuration sources in order of preference
          CONFIG_SOURCES=(
            ".github/development-pipeline-config.yml"
            ".github/dev-pipeline.yml"
            "../shared-workflows/configs/${{ inputs.repo_name }}.yml"
            "../shared-workflows/configs/default.yml"
          )
          
          CONFIG_FILE=""
          for source in "${CONFIG_SOURCES[@]}"; do
            if [ -f "$source" ]; then
              CONFIG_FILE="$source"
              echo "Found config: $CONFIG_FILE"
              break
            fi
          done
          
          if [ -z "$CONFIG_FILE" ]; then
            echo "❌ No configuration file found"
            exit 1
          fi
          
          echo "config_source=$CONFIG_FILE" >> $GITHUB_OUTPUT
          
          # Export CONFIG_FILE for Python script
          export CONFIG_FILE
          
          # Validate configuration against schema
          python3 << 'EOF'
          import yaml
          import jsonschema
          import sys
          import os
          
          # Load schema
          with open('../shared-workflows/configs/schema.yml', 'r') as f:
              schema_doc = yaml.safe_load(f)
              
          # Convert our custom schema to JSON Schema
          def convert_to_json_schema(custom_schema):
              json_schema = {
                  "type": "object",
                  "properties": {},
                  "required": custom_schema['configuration_schema']['required_fields']
              }
              
              for field, definition in custom_schema['field_definitions'].items():
                  json_schema['properties'][field] = {
                      "type": definition['type']
                  }
                  
                  if 'default' in definition:
                      json_schema['properties'][field]['default'] = definition['default']
                  if 'pattern' in definition:
                      json_schema['properties'][field]['pattern'] = definition['pattern']
                  if 'minimum' in definition:
                      json_schema['properties'][field]['minimum'] = definition['minimum']
                  if 'maximum' in definition:
                      json_schema['properties'][field]['maximum'] = definition['maximum']
                      
              return json_schema
          
          schema = convert_to_json_schema(schema_doc)
          
          # Load and validate config
          config_file = os.environ.get('CONFIG_FILE')
          if not config_file:
              print("❌ CONFIG_FILE environment variable not set")
              sys.exit(1)
          with open(config_file, 'r') as f:
              config = yaml.safe_load(f)
          
          try:
              jsonschema.validate(config, schema)
              print("✅ Configuration validation passed")
          except jsonschema.ValidationError as e:
              print(f"❌ Configuration validation failed: {e.message}")
              sys.exit(1)
          
          # Apply defaults for missing optional fields
          default_config = schema_doc['field_definitions']
          for field, definition in default_config.items():
              if field not in config and 'default' in definition:
                  config[field] = definition['default']
                  print(f"Applied default for {field}: {definition['default']}")
          
          # Output processed config
          with open('processed_config.yml', 'w') as f:
              yaml.dump(config, f)
          EOF
          
          # Extract key configuration values
          BASE_BRANCH=$(yq eval '.base_branch' processed_config.yml)
          THOUGHTS_DIR=$(yq eval '.thoughts_directory' processed_config.yml)
          BRANCH_PREFIX=$(yq eval '.branches.prefix' processed_config.yml)
          
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
          echo "thoughts_dir=$THOUGHTS_DIR" >> $GITHUB_OUTPUT
          echo "branch_prefix=$BRANCH_PREFIX" >> $GITHUB_OUTPUT
          
          # Store specialized config sections - properly escaped for GitHub Actions
          VALIDATION_CONFIG=$(yq eval '.validation' processed_config.yml -o=json -I=0)
          TEAM_CONFIG=$(yq eval '.team' processed_config.yml -o=json -I=0)  
          WORKFLOW_CONFIG=$(yq eval '.workflow_customization' processed_config.yml -o=json -I=0)
          
          # Use heredoc to properly handle JSON with special characters
          {
            echo "validation_config<<EOF"
            echo "$VALIDATION_CONFIG"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          
          {
            echo "team_config<<EOF"
            echo "$TEAM_CONFIG" 
            echo "EOF"
          } >> $GITHUB_OUTPUT
          
          {
            echo "workflow_config<<EOF"
            echo "$WORKFLOW_CONFIG"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          
          # Store full config for other jobs using heredoc
          CONFIG_JSON=$(yq eval -o=json -I=0 '.' processed_config.yml)
          {
            echo "config<<EOF"
            echo "$CONFIG_JSON"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Report configuration details
        run: |
          CONFIG_SOURCE="${{ steps.config.outputs.config_source }}"
          REPO_NAME="${{ inputs.repo_name }}"
          BASE_BRANCH="${{ steps.config.outputs.base_branch }}"
          THOUGHTS_DIR="${{ steps.config.outputs.thoughts_dir }}"
          BRANCH_PREFIX="${{ steps.config.outputs.branch_prefix }}"
          
          echo "📝 Configuration loaded successfully"
          echo "Source: $CONFIG_SOURCE"
          echo "Repository: $REPO_NAME"
          echo "Base branch: $BASE_BRANCH"
          echo "Thoughts directory: $THOUGHTS_DIR"
          echo "Branch prefix: $BRANCH_PREFIX"

  # Triggered by: "@atriumn start"
  start-pipeline:
    if: github.event_name == 'repository_dispatch' && github.event.action == 'pipeline-start'
    needs: load-and-validate-config
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.create-branch.outputs.name }}
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          
      - name: Parse pipeline configuration
        id: parse
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          COMMENT="${{ github.event.comment.body }}"
          
          # Extract configuration from comment
          if echo "$COMMENT" | grep -q "Human validation: false"; then
            echo "human_validation=false" >> $GITHUB_OUTPUT
          else
            echo "human_validation=true" >> $GITHUB_OUTPUT
          fi
          
          if echo "$COMMENT" | grep -q "Base branch:"; then
            BASE_OVERRIDE=$(echo "$COMMENT" | grep -o 'Base branch: [^[:space:]]*' | cut -d' ' -f3)
            echo "base_branch_override=$BASE_OVERRIDE" >> $GITHUB_OUTPUT
          fi

      - name: Create feature branch
        id: create-branch
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          # Configure git user for branch operations
          git config user.name "Pipeline Bot"
          git config user.email "pipeline@atriumn.com"
          
          # Use override or config default
          BASE_BRANCH="${{ steps.parse.outputs.base_branch_override || needs.load-and-validate-config.outputs.base_branch }}"
          
          # Get issue number and title (handle both workflow_call and repository_dispatch)
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            ISSUE_NUMBER="${{ github.event.client_payload.issue_number }}"
            ISSUE_TITLE="${{ github.event.client_payload.issue_title }}"
          else
            ISSUE_NUMBER="${{ inputs.issue_number }}"
            ISSUE_TITLE=$(gh issue view $ISSUE_NUMBER --repo ${{ inputs.repo_name }} --json title --jq '.title')
          fi
          
          # Create branch name
          TITLE_SLUG=$(echo "$ISSUE_TITLE" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          BRANCH_NAME="${{ needs.load-and-validate-config.outputs.branch_prefix }}issue-$ISSUE_NUMBER-$TITLE_SLUG"
          
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Get base branch SHA
          BASE_SHA=$(git rev-parse "origin/$BASE_BRANCH")
          
          # Check if branch already exists
          if git show-ref --verify --quiet "refs/remotes/origin/$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME already exists, checking it out and updating"
            git checkout "$BRANCH_NAME" || git checkout -b "$BRANCH_NAME" "origin/$BRANCH_NAME"
            git pull origin "$BRANCH_NAME"
            echo "✅ Updated existing branch: $BRANCH_NAME"
          else
            echo "Creating new branch: $BRANCH_NAME"
            git checkout -b "$BRANCH_NAME" "$BASE_SHA"
            git push origin "$BRANCH_NAME"
            echo "✅ Created new branch: $BRANCH_NAME from $BASE_BRANCH"
          fi

      - name: Create decision record
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.create-branch.outputs.name }}"
          THOUGHTS_DIR="${{ needs.load-and-validate-config.outputs.thoughts_dir }}"
          ISSUE_NUMBER="${{ inputs.issue_number || github.event.client_payload.issue_number }}"
          ISSUE_TITLE=$(gh issue view $ISSUE_NUMBER --repo ${{ inputs.repo_name }} --json title --jq '.title')
          
          # Create decision record directory if it doesn't exist
          mkdir -p "$THOUGHTS_DIR/shared/decisions"
          
          # Clean up any existing research for fresh start
          rm -f "$THOUGHTS_DIR/shared/research/"*"issue-$ISSUE_NUMBER"* || true
          
          # Set template variables
          REPO_NAME="${{ inputs.repo_name }}"
          BASE_BRANCH_FINAL="${{ steps.parse.outputs.base_branch_override || needs.load-and-validate-config.outputs.base_branch }}"
          HUMAN_VALIDATION="${{ steps.parse.outputs.human_validation }}"
          
          # Create initial decision record
          cat > "$THOUGHTS_DIR/shared/decisions/pipeline-issue-$ISSUE_NUMBER.md" << EOF
          # Pipeline Decision Record - Issue #$ISSUE_NUMBER: $ISSUE_TITLE
          
          ## Issue Context
          - **Issue**: #$ISSUE_NUMBER
          - **Title**: $ISSUE_TITLE
          - **Branch**: $BRANCH_NAME
          - **Started**: $(date -Iseconds)
          - **Repository**: $REPO_NAME
          - **Base Branch**: $BASE_BRANCH_FINAL
          
          ## Current Status
          - **Phase**: Research (Starting)
          - **Completion**: 0%
          - **Next Action**: Research codebase for issue requirements
          
          ## Pipeline Configuration
          - **Human Validation**: $HUMAN_VALIDATION
          - **Thoughts Directory**: $THOUGHTS_DIR
          
          ---
          
          ## Research Phase (Starting)
          - **Status**: In Progress
          - **Started**: $(date -Iseconds)
          
          EOF
          
          # Commit decision record
          git config user.name "Pipeline Bot"
          git config user.email "pipeline@atriumn.com"
          git add "$THOUGHTS_DIR/shared/decisions/pipeline-issue-$ISSUE_NUMBER.md"
          git commit -m "Pipeline: Initialize decision record for issue #$ISSUE_NUMBER"
          git push origin "$BRANCH_NAME"

      - name: Add branch label to issue
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.create-branch.outputs.name }}"
          
          # Create and add pipeline label for tracking
          LABEL_NAME="pipeline-issue-${{ inputs.issue_number }}"
          gh label create "$LABEL_NAME" --color "0366d6" --description "Pipeline: $BRANCH_NAME" --repo ${{ inputs.repo_name }} || true
          gh issue edit ${{ inputs.issue_number }} --add-label "$LABEL_NAME" --repo ${{ inputs.repo_name }}

      - name: Trigger research phase
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.create-branch.outputs.name }}"
          THOUGHTS_DIR="${{ needs.load-and-validate-config.outputs.thoughts_dir }}"
          
          gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
          🚀 **Development Pipeline Started**
          
          **Branch**: \`$BRANCH_NAME\` (created from \`${{ steps.parse.outputs.base_branch_override || needs.load-and-validate-config.outputs.base_branch }}\`)
          **Pipeline Mode**: $(if [ '${{ steps.parse.outputs.human_validation }}' = 'true' ]; then echo 'Human validation required'; else echo 'Fully automated'; fi)
          **Decision Record**: \`$THOUGHTS_DIR/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md\`
          
          ---
          
          @claude Please research the codebase for this issue following our research methodology:
          
          **PIPELINE BRANCH**: \`$BRANCH_NAME\` (feature branch for this issue)
          **Context File**: \`$THOUGHTS_DIR/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md\`
          
          **🚫 GIT-FREE STRATEGY**: You do NOT need to perform any git operations (fetch, checkout, clone, etc.). Simply create and edit files in your current working directory. The pipeline will automatically commit and push your changes to the feature branch.
          
          **Research Requirements:**
          - Read any mentioned ticket files completely first
          - Create research document: \`$THOUGHTS_DIR/shared/research/$(date +%Y-%m-%d_%H-%M-%S)_issue-${{ inputs.issue_number }}.md\`
          - Include YAML frontmatter with metadata
          - Update the decision record with your findings
          
          **Research Structure Required:**
          - YAML frontmatter with metadata (required: date, researcher; recommended: git_commit, branch, issue_number, research_type)
          - Research Question section
          - Summary section with high-level findings
          - Detailed Findings with file:line references
          - Code References section
          - Architecture Insights
          - Historical Context from thoughts/ directory
          
          **IMPORTANT: When finished, post your research completion signal in a separate comment.**
          
          Please complete the research and commit both documents.
          "

  # Research phase - runs Claude Code and commits files
  research-phase:
    if: (github.event_name == 'repository_dispatch' && github.event.action == 'pipeline-start')
    needs: start-pipeline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout shared workflows
        uses: actions/checkout@v4
        with:
          repository: atriumn/atriumn-issue-driven-development
          path: shared-workflows
          
      - name: Checkout feature branch
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          ref: ${{ needs.start-pipeline.outputs.branch_name }}
          path: target-repo
          
      - name: Run Claude Code for research
        uses: anthropics/claude-code-action@beta
        with:
          github-token: ${{ secrets.REPO_TOKEN }}
          working-directory: target-repo
          
      - name: Commit Claude's research files
        run: |
          cd target-repo
          
          # Configure git user
          git config user.name "Pipeline Bot"
          git config user.email "pipeline@atriumn.com"
          
          echo "🔍 Checking for files Claude created..."
          
          # Add all files (including new ones)
          git add .
          
          if git diff --staged --quiet; then
            echo "ℹ️ No new files created by Claude Code"
          else
            echo "📝 Found files created by Claude Code, committing..."
            git status --porcelain
            git commit -m "Pipeline: Claude's research for issue #${{ inputs.issue_number || github.event.client_payload.issue_number }}"
            git push origin "${{ needs.start-pipeline.outputs.branch_name }}"
            echo "✅ Committed Claude's research files to feature branch"
          fi

  # Triggered by: research-phase completing
  validate-research:
    if: always() && needs.research-phase.result == 'success'
    needs: [load-and-validate-config, research-phase]
    runs-on: ubuntu-latest
    steps:
      - name: Create pipeline branch name
        id: research-branch
        run: |
          # Create pipeline branch name from issue title
          ISSUE_TITLE="${{ github.event.issue.title || github.event.client_payload.issue_title || 'pipeline-task' }}"
          TITLE_SLUG=$(echo "$ISSUE_TITLE" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          BRANCH_NAME="feature/issue-${{ inputs.issue_number || github.event.client_payload.issue_number }}-$TITLE_SLUG"
          
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Pipeline branch: $BRANCH_NAME"

      - name: Checkout feature branch with current state
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          ref: ${{ steps.research-branch.outputs.name }}
          
      - name: Find and validate research document
        id: validate-research
        run: |
          THOUGHTS_DIR="${{ needs.load-and-validate-config.outputs.thoughts_dir }}"
          
          echo "🔍 Looking for research document..."
          
          # Find research document in workspace
          # Remove double slashes in path
          THOUGHTS_PATH="${THOUGHTS_DIR%/}/shared/research"
          RESEARCH_DOC=$(find "$THOUGHTS_PATH" -name "*issue-${{ inputs.issue_number }}*" -type f 2>/dev/null | head -1 || true)
          
          # Also check root directory and other common locations
          if [ -z "$RESEARCH_DOC" ]; then
            RESEARCH_DOC=$(find . -name "*issue-${{ inputs.issue_number }}*" -name "*.md" -type f 2>/dev/null | head -1 || true)
          fi
          
          if [ -z "$RESEARCH_DOC" ]; then
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            echo "error=No research document found for issue #$ISSUE_NUMBER" >> $GITHUB_OUTPUT
            echo "❌ No research document found"
            echo "Directory contents:"
            find . -name "*.md" -type f 2>/dev/null || echo "No markdown files found"
            exit 0
          fi
          
          echo "research_doc=$RESEARCH_DOC" >> $GITHUB_OUTPUT
          echo "Found research document: $RESEARCH_DOC"
          
          # Basic validation: check if document has required sections
          if grep -q "Research Question" "$RESEARCH_DOC" && \
             grep -q "Summary" "$RESEARCH_DOC" && \
             grep -q "Detailed Findings" "$RESEARCH_DOC"; then
            echo "validation_passed=true" >> $GITHUB_OUTPUT
            echo "✅ Research validation passed"
          else
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            echo "error=Research document missing required sections" >> $GITHUB_OUTPUT
            echo "❌ Research validation failed - missing required sections"
          fi

      - name: Update decision record with research results
        if: steps.validate-research.outputs.validation_passed == 'true'
        run: |
          THOUGHTS_DIR="${{ needs.load-and-validate-config.outputs.thoughts_dir }}"
          ISSUE_NUMBER="${{ inputs.issue_number }}"
          DECISION_FILE="$THOUGHTS_DIR/shared/decisions/pipeline-issue-$ISSUE_NUMBER.md"
          
          # Update decision record
          RESEARCH_DOC_PATH="${{ steps.validate-research.outputs.research_doc }}"
          FILE_REF_COUNT=$(grep -c '`[^`]*\.[a-z]*:' "$RESEARCH_DOC_PATH")
          
          cat >> "$DECISION_FILE" << EOF
          
          ### Research Phase (Complete ✅)
          - **Completed**: $(date -Iseconds)
          - **Document**: $RESEARCH_DOC_PATH
          - **Validation**: ✅ Passed automated validation
          - **File References**: $FILE_REF_COUNT
          - **Status**: Ready for planning phase
          
          EOF
          
          git config user.name "Pipeline Bot"
          git config user.email "pipeline@atriumn.com"
          git add "$DECISION_FILE"
          git commit -m "Pipeline: Research phase completed for issue #${{ inputs.issue_number }}"
          git push origin ${{ steps.research-branch.outputs.name }}

      - name: Handle validation failure
        if: steps.validate-research.outputs.validation_passed == 'false'
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
          ❌ **Research Validation Failed**
          
          **Error**: ${{ steps.validate-research.outputs.error }}
          
          **Action Required**: Please review and retry the research phase.
          
          **Common Issues:**
          - Missing required sections in research document
          - Insufficient file references (need at least 3)
          - Invalid YAML frontmatter
          - Document not committed to correct branch
          
          **To Retry**: The research phase can be restarted once issues are resolved.
          "
          exit 1

      - name: Check pipeline mode
        id: research-mode
        run: |
          # Extract pipeline mode from decision record
          cd target-repo
          THOUGHTS_DIR="${{ needs.load-and-validate-config.outputs.thoughts_dir }}"
          DECISION_FILE="$THOUGHTS_DIR/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md"
          
          if grep -q "Human Validation.*false" "$DECISION_FILE"; then
            echo "auto_proceed=true" >> $GITHUB_OUTPUT
          else
            echo "auto_proceed=false" >> $GITHUB_OUTPUT
          fi

      - name: Request human approval
        if: steps.validate-research.outputs.validation_passed == 'true' && steps.research-mode.outputs.auto_proceed == 'false'
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          RESEARCH_DOC="${{ steps.validate-research.outputs.research_doc }}"
          BRANCH_NAME="${{ steps.research-branch.outputs.name }}"
          THOUGHTS_DIR="${{ needs.load-and-validate-config.outputs.thoughts_dir }}"
          DECISION_DOC="${THOUGHTS_DIR%/}/shared/decisions/pipeline-issue-$ISSUE_NUMBER.md"
          REPO_NAME="${{ inputs.repo_name }}"
          ISSUE_USER="${{ github.event.issue.user.login || github.event.client_payload.issue_user }}"
          
          gh issue comment $ISSUE_NUMBER --repo "$REPO_NAME" --body "
          🔍 **Research Validation Required**
          
          **Automated Validation**: ✅ Passed
          - ✅ Document structure valid
          - ✅ $(grep -c '`[^`]*\.[a-z]*:' "$RESEARCH_DOC") file references found (minimum 3 required)
          - ✅ All required sections present
          - ✅ YAML frontmatter complete
          
          **Research Document**: [\`$RESEARCH_DOC\`](https://github.com/$REPO_NAME/blob/$BRANCH_NAME/$RESEARCH_DOC)
          **Decision Record**: [\`$DECISION_DOC\`](https://github.com/$REPO_NAME/blob/$BRANCH_NAME/$DECISION_DOC)
          
          **Human Review Needed**: 
          @$ISSUE_USER Please review the research findings:
          
          **Review Questions:**
          - Does the research adequately address the issue requirements?
          - Are the code references sufficient for implementation planning?
          - Any missing architectural considerations?
          - Ready to proceed to planning phase?
          
          **Actions:**
          - ✅ **Approve**: Comment \`approve research\`
          - ❌ **Reject**: Comment \`reject research: [reason]\`
          - 🔄 **Request changes**: Comment \`modify research: [specific requests]\`
          "

      - name: Auto-proceed to planning
        if: steps.validate-research.outputs.validation_passed == 'true' && steps.research-mode.outputs.auto_proceed == 'true'
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
          🔍 **Research Validation**: ✅ Passed (automated)
          **Auto-proceeding to Planning Phase**
          
          ---
          
          @claude Please create implementation plan based on this research:
          
          **Read complete pipeline context first:**
          \`${{ needs.load-and-validate-config.outputs.thoughts_dir }}/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md\`
          
          **Critical Context:**
          - Research findings are documented and validated
          - Use the architectural decisions from research phase
          - Current branch: \`${{ steps.research-branch.outputs.name }}\`
          
          **Planning Requirements:**
          - Read research document from branch completely
          - Create detailed plan at: \`${{ needs.load-and-validate-config.outputs.thoughts_dir }}/shared/plans/issue-${{ inputs.issue_number }}-implementation.md\`
          - Include phased implementation with clear success criteria
          - Split success criteria into Automated vs Manual verification
          - No unresolved open questions in final plan
          - Update decision record with planning decisions
          
          **Plan Structure Required:**
          - YAML frontmatter with metadata
          - Current State Analysis with file:line references  
          - Desired End State specification
          - \"What We're NOT Doing\" section to prevent scope creep
          - Phased implementation approach
          - Testing Strategy
          - Migration Notes if applicable
          
          **Success Criteria Format:**
          \`\`\`
          #### Automated Verification:
          - [ ] Tests pass: \`make test\`
          - [ ] Linting passes: \`make lint\`
          - [ ] Type checking passes: \`make typecheck\`
          
          #### Manual Verification:  
          - [ ] Feature works correctly in UI
          - [ ] Performance acceptable under load
          - [ ] Edge cases handled properly
          \`\`\`
          
          **🚫 GIT-FREE STRATEGY**: You do NOT need to perform any git operations (fetch, checkout, clone, etc.). Simply create and edit files in your current working directory. The pipeline will automatically commit and push your changes to the feature branch.
          
          Please create the plan following this methodology. The pipeline will handle all git operations for you.
          
          **When finished, post this exact completion signal:**
          🟣 ATRIUMN-PLANNING-COMPLETE
          "

  # Triggered by: "approve research" comment
  trigger-planning:
    if: (inputs.trigger_comment == 'approve research') || (github.event_name == 'repository_dispatch' && github.event.action == 'approve-research')
    needs: load-and-validate-config
    runs-on: ubuntu-latest
    steps:
      - name: Create pipeline branch name
        id: planning-branch
        run: |
          # Create pipeline branch name from issue title
          ISSUE_TITLE="${{ github.event.issue.title || github.event.client_payload.issue_title || 'pipeline-task' }}"
          TITLE_SLUG=$(echo "$ISSUE_TITLE" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          BRANCH_NAME="feature/issue-${{ inputs.issue_number || github.event.client_payload.issue_number }}-$TITLE_SLUG"
          
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Pipeline branch: $BRANCH_NAME"

      - name: Checkout feature branch with current state
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          ref: ${{ steps.planning-branch.outputs.name }}

      - name: Record approval and trigger planning
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          gh issue comment ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --body "
          ✅ **Research Approved by @${{ github.event.comment.user.login }}**
          **Proceeding to Planning Phase**
          
          ---
          
          @claude Please create implementation plan based on this research:
          
          **Read complete pipeline context first:**
          \`${{ needs.load-and-validate-config.outputs.thoughts_dir }}/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md\`
          
          **Critical Context:**
          - Research findings are documented and validated
          - Use the architectural decisions from research phase
          - Current branch: \`${{ steps.planning-branch.outputs.name }}\`
          
          **Planning Requirements:**
          - Read research document from branch completely
          - Create detailed plan at: \`${{ needs.load-and-validate-config.outputs.thoughts_dir }}/shared/plans/issue-${{ inputs.issue_number }}-implementation.md\`
          - Include phased implementation with clear success criteria
          - Split success criteria into Automated vs Manual verification
          - No unresolved open questions in final plan
          - Update decision record with planning decisions
          
          **Plan Structure Required:**
          - YAML frontmatter with metadata
          - Current State Analysis with file:line references  
          - Desired End State specification
          - \"What We're NOT Doing\" section to prevent scope creep
          - Phased implementation approach
          - Testing Strategy
          - Migration Notes if applicable
          
          **Success Criteria Format:**
          \`\`\`
          #### Automated Verification:
          - [ ] Tests pass: \`make test\`
          - [ ] Linting passes: \`make lint\`
          - [ ] Type checking passes: \`make typecheck\`
          
          #### Manual Verification:  
          - [ ] Feature works correctly in UI
          - [ ] Performance acceptable under load
          - [ ] Edge cases handled properly
          \`\`\`
          
          **🚫 GIT-FREE STRATEGY**: You do NOT need to perform any git operations (fetch, checkout, clone, etc.). Simply create and edit files in your current working directory. The pipeline will automatically commit and push your changes to the feature branch.
          
          Please create the plan following this methodology. The pipeline will handle all git operations for you.
          
          **When finished, post this exact completion signal:**
          🟣 ATRIUMN-PLANNING-COMPLETE
          "

# Implementation validation and approval workflows

  # Triggered by: Claude completing planning  
  validate-plan:
    if: (inputs.trigger_comment == '🟣 ATRIUMN-PLANNING-COMPLETE') || (github.event_name == 'repository_dispatch' && github.event.action == 'planning-complete')
    needs: load-and-validate-config
    runs-on: ubuntu-latest
    steps:
      - name: Create pipeline branch name
        id: plan-branch
        run: |
          # Create pipeline branch name from issue title
          ISSUE_TITLE="${{ github.event.issue.title || github.event.client_payload.issue_title || 'pipeline-task' }}"
          TITLE_SLUG=$(echo "$ISSUE_TITLE" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          BRANCH_NAME="feature/issue-${{ inputs.issue_number || github.event.client_payload.issue_number }}-$TITLE_SLUG"
          
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Pipeline branch: $BRANCH_NAME"

      - name: Checkout feature branch with current state
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          ref: ${{ steps.plan-branch.outputs.name }}
          
      - name: Run Claude Code to capture planning files
        uses: anthropics/claude-code-action@v1
        with:
          github-token: ${{ secrets.REPO_TOKEN }}
          # Claude Code will detect the completion signal and capture the planning files
          # This runs in the same workspace, so files Claude created will be available
          
      - name: Commit Claude's planning files
        run: |
          # Configure git user
          git config user.name "Pipeline Bot"
          git config user.email "pipeline@atriumn.com"
          
          echo "🔍 Checking for files Claude created in this workspace..."
          
          # Add all files (including new ones)
          git add .
          
          if git diff --staged --quiet; then
            echo "ℹ️ No new files created by Claude Code"
          else
            echo "📝 Found files created by Claude Code, committing..."
            git status --porcelain
            git commit -m "Pipeline: Capture Claude's planning for issue #${{ inputs.issue_number }}"
            git push origin "${{ steps.plan-branch.outputs.name }}"
            echo "✅ Committed Claude's planning files to feature branch"
          fi

      - name: Find and validate plan document
        id: validate-plan
        run: |
          THOUGHTS_DIR="${{ needs.load-and-validate-config.outputs.thoughts_dir }}"
          
          # Find plan document in feature branch
          cd target-repo
          # Remove double slashes in path
          THOUGHTS_PATH="${THOUGHTS_DIR%/}/shared/plans"
          PLAN_DOC=$(find "$THOUGHTS_PATH" -name "*issue-${{ inputs.issue_number }}*" -type f | head -1 || true)
          
          # Also check root directory and other common locations
          if [ -z "$PLAN_DOC" ]; then
            PLAN_DOC=$(find . -name "*issue-${{ inputs.issue_number }}*" -name "*.md" -path "*/plans/*" -type f | head -1 || true)
          fi
          
          if [ -z "$PLAN_DOC" ]; then
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            echo "error=No plan document found for issue #$ISSUE_NUMBER" >> $GITHUB_OUTPUT
            echo "❌ No plan document found"
            echo "Directory contents:"
            find . -name "*.md" -type f
            exit 0
          fi
          
          echo "plan_doc=$PLAN_DOC" >> $GITHUB_OUTPUT
          echo "Found plan document: $PLAN_DOC"
          
          # Basic validation: check if document has required sections
          if grep -q "Current State Analysis" "$PLAN_DOC" && \
             grep -q "Desired End State" "$PLAN_DOC" && \
             grep -q "Phased implementation" "$PLAN_DOC" && \
             grep -q "Testing Strategy" "$PLAN_DOC"; then
            echo "validation_passed=true" >> $GITHUB_OUTPUT
            echo "✅ Plan validation passed"
          else
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            echo "error=Plan document missing required sections" >> $GITHUB_OUTPUT
            echo "❌ Plan validation failed - missing required sections"
          fi

      - name: Check pipeline mode
        id: plan-mode
        run: |
          cd target-repo
          THOUGHTS_DIR="${{ needs.load-and-validate-config.outputs.thoughts_dir }}"
          ISSUE_NUM=${{ inputs.issue_number || github.event.issue.number || github.event.client_payload.issue_number }}
          DECISION_FILE="${THOUGHTS_DIR%/}/shared/decisions/pipeline-issue-$ISSUE_NUM.md"
          
          if grep -q "Human Validation.*false" "$DECISION_FILE"; then
            echo "auto_proceed=true" >> $GITHUB_OUTPUT
          else
            echo "auto_proceed=false" >> $GITHUB_OUTPUT
          fi

      - name: Request plan approval
        if: steps.validate-plan.outputs.validation_passed == 'true' && steps.plan-mode.outputs.auto_proceed == 'false'
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          PLAN_DOC="${{ steps.validate-plan.outputs.plan_doc }}"
          BRANCH_NAME="${{ steps.plan-branch.outputs.name }}"
          THOUGHTS_DIR="${{ needs.load-and-validate-config.outputs.thoughts_dir }}"
          ISSUE_NUM=${{ inputs.issue_number || github.event.issue.number || github.event.client_payload.issue_number }}
          DECISION_DOC="${THOUGHTS_DIR%/}/shared/decisions/pipeline-issue-$ISSUE_NUM.md"
          ISSUE_USER="${{ github.event.issue.user.login || github.event.client_payload.issue_user }}"
          
          gh issue comment $ISSUE_NUM --repo ${{ inputs.repo_name }} --body "
          🎯 **Plan Validation Required**
          
          **Automated Validation**: ✅ Passed
          - ✅ Plan structure valid
          - ✅ Success criteria defined
          - ✅ Implementation phases clear
          - ✅ YAML frontmatter complete
          
          **Plan Document**: [\`$PLAN_DOC\`](https://github.com/${{ inputs.repo_name }}/blob/$BRANCH_NAME/$PLAN_DOC)
          **Decision Record**: [\`$DECISION_DOC\`](https://github.com/${{ inputs.repo_name }}/blob/$BRANCH_NAME/$DECISION_DOC)
          
          **Human Review Needed**: 
          @$ISSUE_USER Please review the implementation plan:
          
          **Review Questions:**
          - Is the implementation approach sound?
          - Are the success criteria sufficient?
          - Any missing technical considerations?
          - Ready to proceed to implementation?
          
          **Actions:**
          - ✅ **Approve**: Comment \`@atriumn approve-plan\`
          - ❌ **Reject**: Comment \`reject plan: [reason]\`
          - 🔄 **Request changes**: Comment \`modify plan: [specific requests]\`
          "

      - name: Auto-proceed to implementation
        if: steps.validate-plan.outputs.validation_passed == 'true' && steps.plan-mode.outputs.auto_proceed == 'true'
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          ISSUE_NUM=${{ inputs.issue_number || github.event.issue.number || github.event.client_payload.issue_number }}
          
          gh issue comment $ISSUE_NUM --repo ${{ inputs.repo_name }} --body "
          🎯 **Plan Validation**: ✅ Passed (automated)
          **Auto-proceeding to Implementation Phase**
          
          ---
          
          @claude Please implement the feature based on the approved plan:
          
          **Read complete context first:**
          - Plan: \`${{ steps.validate-plan.outputs.plan_doc }}\`
          - Decision Record: \`${{ needs.load-and-validate-config.outputs.thoughts_dir }}shared/decisions/pipeline-issue-$ISSUE_NUM.md\`
          
          **🚫 GIT-FREE STRATEGY**: You do NOT need to perform any git operations (fetch, checkout, clone, etc.). Simply create and edit files in your current working directory. The pipeline will automatically commit and push your changes to the feature branch.
          
          **Implementation Requirements:**
          - Follow the phased approach in the plan
          - Implement all success criteria
          - Write/update tests as specified
          - Update documentation
          - Follow existing code patterns
          
          **When finished, post this exact completion signal:**
          🟣 ATRIUMN-IMPLEMENTATION-COMPLETE
          "

  # Triggered by: "approve plan" comment
  trigger-implementation:
    if: (inputs.trigger_comment == 'approve plan') || (github.event_name == 'repository_dispatch' && github.event.action == 'approve-plan')
    needs: load-and-validate-config
    runs-on: ubuntu-latest
    steps:
      - name: Create pipeline branch name
        id: impl-branch
        run: |
          # Create pipeline branch name from issue title
          ISSUE_TITLE="${{ github.event.issue.title || github.event.client_payload.issue_title || 'pipeline-task' }}"
          TITLE_SLUG=$(echo "$ISSUE_TITLE" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          BRANCH_NAME="feature/issue-${{ inputs.issue_number || github.event.client_payload.issue_number }}-$TITLE_SLUG"
          
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Pipeline branch: $BRANCH_NAME"

      - name: Checkout feature branch with current state
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          ref: ${{ steps.impl-branch.outputs.name }}

      - name: Record approval and trigger implementation
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          ISSUE_NUM=${{ inputs.issue_number }}
          THOUGHTS_DIR="${{ needs.load-and-validate-config.outputs.thoughts_dir }}"
          
          gh issue comment $ISSUE_NUM --repo ${{ inputs.repo_name }} --body "
          ✅ **Plan Approved by @${{ github.event.comment.user.login }}**
          **Proceeding to Implementation Phase**
          
          ---
          
          @claude Please implement the feature based on the approved plan:
          
          **Read complete context first:**
          - Plan: Find the plan document in \`${THOUGHTS_DIR}shared/plans/\`
          - Decision Record: \`${THOUGHTS_DIR}shared/decisions/pipeline-issue-$ISSUE_NUM.md\`
          
          **🚫 GIT-FREE STRATEGY**: You do NOT need to perform any git operations (fetch, checkout, clone, etc.). Simply create and edit files in your current working directory. The pipeline will automatically commit and push your changes to the feature branch.
          
          **Implementation Requirements:**
          - Follow the phased approach in the plan
          - Implement all success criteria  
          - Write/update tests as specified
          - Update documentation
          - Follow existing code patterns
          
          **When finished, post this exact completion signal:**
          🟣 ATRIUMN-IMPLEMENTATION-COMPLETE
          "

  # Triggered by: Claude completing implementation
  validate-implementation:
    if: (inputs.trigger_comment == '🟣 ATRIUMN-IMPLEMENTATION-COMPLETE') || (github.event_name == 'repository_dispatch' && github.event.action == 'implementation-complete')
    needs: load-and-validate-config
    runs-on: ubuntu-latest
    steps:
      - name: Create pipeline branch name
        id: validate-impl-branch
        run: |
          # Create pipeline branch name from issue title
          ISSUE_TITLE="${{ github.event.issue.title || github.event.client_payload.issue_title || 'pipeline-task' }}"
          TITLE_SLUG=$(echo "$ISSUE_TITLE" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          BRANCH_NAME="feature/issue-${{ inputs.issue_number || github.event.client_payload.issue_number }}-$TITLE_SLUG"
          
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Pipeline branch: $BRANCH_NAME"

      - name: Checkout shared workflows
        uses: actions/checkout@v4
        with:
          repository: atriumn/atriumn-issue-driven-development
          path: shared-workflows
          
      - name: Checkout feature branch with current state
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          ref: ${{ steps.validate-impl-branch.outputs.name }}
          path: target-repo
          
      - name: Run Claude Code to capture implementation files
        uses: anthropics/claude-code-action@v1
        with:
          github-token: ${{ secrets.REPO_TOKEN }}
          # Claude Code will detect the completion signal and capture the implementation files
          # This runs in the same workspace, so files Claude created will be available
          
      - name: Commit Claude's implementation files
        run: |
          # Configure git user
          git config user.name "Pipeline Bot"
          git config user.email "pipeline@atriumn.com"
          
          echo "🔍 Checking for files Claude created in this workspace..."
          
          # Add all files (including new ones)
          git add .
          
          if git diff --staged --quiet; then
            echo "ℹ️ No new files created by Claude Code"
          else
            echo "📝 Found files created by Claude Code, committing..."
            git status --porcelain
            git commit -m "Pipeline: Capture Claude's implementation for issue #${{ inputs.issue_number }}"
            git push origin "${{ steps.validate-impl-branch.outputs.name }}"
            echo "✅ Committed Claude's implementation files to feature branch"
          fi

      - name: Validate implementation
        id: validate-impl
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          cd target-repo
          
          echo "🔍 Running implementation validation..."
          
          # Initialize validation results
          VALIDATION_PASSED=true
          VALIDATION_RESULTS=""
          
          # Run configured test commands
          CONFIG_JSON='${{ needs.load-and-validate-config.outputs.config }}'
          TEST_COMMANDS=$(echo "$CONFIG_JSON" | jq -r '.validation.implementation_test_commands[]? // empty')
          
          if [ -n "$TEST_COMMANDS" ]; then
            echo "Running configured test commands..."
            while IFS= read -r command; do
              echo "Running: $command"
              if eval "$command"; then
                VALIDATION_RESULTS="$VALIDATION_RESULTS\n- ✅ $command"
              else
                VALIDATION_RESULTS="$VALIDATION_RESULTS\n- ❌ $command (FAILED)"
                VALIDATION_PASSED=false
              fi
            done <<< "$TEST_COMMANDS"
          else
            echo "No test commands configured, checking for common patterns..."
            
            # Check for package.json and run tests
            if [ -f "package.json" ]; then
              if npm test; then
                VALIDATION_RESULTS="$VALIDATION_RESULTS\n- ✅ npm test"
              else
                VALIDATION_RESULTS="$VALIDATION_RESULTS\n- ❌ npm test (FAILED)"
                VALIDATION_PASSED=false
              fi
            fi
            
            # Check for Makefile and run tests
            if [ -f "Makefile" ] && grep -q "test:" Makefile; then
              if make test; then
                VALIDATION_RESULTS="$VALIDATION_RESULTS\n- ✅ make test"
              else
                VALIDATION_RESULTS="$VALIDATION_RESULTS\n- ❌ make test (FAILED)"
                VALIDATION_PASSED=false
              fi
            fi
          fi
          
          # Basic code quality checks
          echo "Running basic quality checks..."
          
          # Check for secrets (basic scan)
          if git log --all --full-history -- | grep -i -E "(password|secret|key|token)" >/dev/null; then
            echo "⚠️ Potential secrets detected in commit messages"
            VALIDATION_RESULTS="$VALIDATION_RESULTS\n- ⚠️ Potential secrets in commits (manual review needed)"
          else
            VALIDATION_RESULTS="$VALIDATION_RESULTS\n- ✅ No obvious secrets in commits"
          fi
          
          # Check if files were actually changed
          CHANGED_FILES=$(git diff --name-only "${{ needs.load-and-validate-config.outputs.base_branch }}" | wc -l)
          if [ "$CHANGED_FILES" -gt 0 ]; then
            VALIDATION_RESULTS="$VALIDATION_RESULTS\n- ✅ $CHANGED_FILES files modified"
          else
            VALIDATION_RESULTS="$VALIDATION_RESULTS\n- ❌ No files changed"
            VALIDATION_PASSED=false
          fi
          
          echo "validation_passed=$VALIDATION_PASSED" >> $GITHUB_OUTPUT
          echo "validation_results<<EOF" >> $GITHUB_OUTPUT
          echo -e "$VALIDATION_RESULTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check pipeline mode for implementation approval
        id: impl-mode
        run: |
          cd target-repo
          THOUGHTS_DIR="${{ needs.load-and-validate-config.outputs.thoughts_dir }}"
          ISSUE_NUM=${{ inputs.issue_number || github.event.issue.number || github.event.client_payload.issue_number }}
          DECISION_FILE="${THOUGHTS_DIR%/}/shared/decisions/pipeline-issue-$ISSUE_NUM.md"
          
          if grep -q "Human Validation.*false" "$DECISION_FILE"; then
            echo "auto_proceed=true" >> $GITHUB_OUTPUT
          else
            echo "auto_proceed=false" >> $GITHUB_OUTPUT
          fi

      - name: Request implementation approval
        if: steps.validate-impl.outputs.validation_passed == 'true' && steps.impl-mode.outputs.auto_proceed == 'false'
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.validate-impl-branch.outputs.name }}"
          ISSUE_NUM=${{ inputs.issue_number || github.event.issue.number || github.event.client_payload.issue_number }}
          ISSUE_USER="${{ github.event.issue.user.login || github.event.client_payload.issue_user }}"
          
          gh issue comment $ISSUE_NUM --repo ${{ inputs.repo_name }} --body "
          ⚙️ **Implementation Validation Required**
          
          **Automated Validation**: ✅ Passed
          ${{ steps.validate-impl.outputs.validation_results }}
          
          **Implementation Branch**: [\`$BRANCH_NAME\`](https://github.com/${{ inputs.repo_name }}/tree/$BRANCH_NAME)
          **Compare Changes**: [View Diff](https://github.com/${{ inputs.repo_name }}/compare/${{ needs.load-and-validate-config.outputs.base_branch }}...$BRANCH_NAME)
          
          **Human Review Needed**: 
          @$ISSUE_USER Please review the implementation:
          
          **Review Questions:**
          - Does the implementation match the plan?
          - Are all success criteria met?
          - Code quality acceptable?
          - Ready to create PR?
          
          **Actions:**
          - ✅ **Approve**: Comment \`@atriumn approve-implementation\`
          - ❌ **Reject**: Comment \`reject implementation: [reason]\`
          - 🔄 **Request changes**: Comment \`modify implementation: [specific requests]\`
          "

      - name: Auto-proceed to PR creation
        if: steps.validate-impl.outputs.validation_passed == 'true' && steps.impl-mode.outputs.auto_proceed == 'true'
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.validate-impl-branch.outputs.name }}"
          ISSUE_NUM=${{ inputs.issue_number || github.event.issue.number || github.event.client_payload.issue_number }}
          
          gh issue comment $ISSUE_NUM --repo ${{ inputs.repo_name }} --body "
          ⚙️ **Implementation Validation**: ✅ Passed (automated)
          **Auto-proceeding to PR Creation**
          
          **Validation Results:**
          ${{ steps.validate-impl.outputs.validation_results }}
          
          🔄 Creating pull request..."
          
          # Create PR automatically
          ISSUE_TITLE=$(gh issue view $ISSUE_NUM --repo ${{ inputs.repo_name }} --json title --jq -r '.title')
          BASE_BRANCH="${{ needs.load-and-validate-config.outputs.base_branch }}"
          
          # Generate PR title and body from context
          PR_TITLE="Implement: $ISSUE_TITLE (#$ISSUE_NUM)"
          
          # Get plan and research docs for PR body
          THOUGHTS_DIR="${{ needs.load-and-validate-config.outputs.thoughts_dir }}"
          PLAN_DOC=$(find target-repo/${THOUGHTS_DIR%/}/shared/plans -name "*issue-$ISSUE_NUM*" -type f | head -1)
          RESEARCH_DOC=$(find target-repo/${THOUGHTS_DIR%/}/shared/research -name "*issue-$ISSUE_NUM*" -type f | head -1)
          DECISION_DOC="${THOUGHTS_DIR%/}/shared/decisions/pipeline-issue-$ISSUE_NUM.md"
          
          # Create PR using external script to avoid YAML parsing issues
          REPO_NAME="${{ inputs.repo_name }}"
          VALIDATION_RESULTS="${{ steps.validate-impl.outputs.validation_results }}"
          
          chmod +x shared-workflows/scripts/create-pr.sh
          shared-workflows/scripts/create-pr.sh \
            "$ISSUE_NUM" \
            "$ISSUE_TITLE" \
            "$BRANCH_NAME" \
            "$BASE_BRANCH" \
            "$REPO_NAME" \
            "$VALIDATION_RESULTS" \
            "$RESEARCH_DOC" \
            "$PLAN_DOC" \
            "$DECISION_DOC"
          
          # Link PR to issue
          PR_NUMBER=$(gh pr view $BRANCH_NAME --repo "$REPO_NAME" --json number --jq -r '.number')
          
          # Update issue with PR link
          VALIDATION_RESULTS_FINAL="${{ steps.validate-impl.outputs.validation_results }}"
          gh issue comment $ISSUE_NUM --repo "$REPO_NAME" --body "
          🎉 **Pull Request Created**
          
          **PR**: #$PR_NUMBER - $PR_TITLE
          **Link**: https://github.com/$REPO_NAME/pull/$PR_NUMBER
          
          **Validation Results:**
          $VALIDATION_RESULTS_FINAL
          
          **Next Steps:**
          - Review and approve the PR
          - Merge when ready
          - Issue will be automatically closed
          "

  # Triggered by: "approve implementation" comment
  trigger-pr-creation:
    if: (inputs.trigger_comment == 'approve implementation') || (github.event_name == 'repository_dispatch' && github.event.action == 'approve-implementation')
    needs: load-and-validate-config
    runs-on: ubuntu-latest
    steps:
      - name: Create pipeline branch name
        id: pr-branch
        run: |
          # Create pipeline branch name from issue title
          ISSUE_TITLE="${{ github.event.issue.title || github.event.client_payload.issue_title || 'pipeline-task' }}"
          TITLE_SLUG=$(echo "$ISSUE_TITLE" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          BRANCH_NAME="feature/issue-${{ inputs.issue_number || github.event.client_payload.issue_number }}-$TITLE_SLUG"
          
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Pipeline branch: $BRANCH_NAME"

      - name: Checkout feature branch with current state
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          ref: ${{ steps.pr-branch.outputs.name }}

      - name: Record approval and create PR
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          ISSUE_NUM=${{ inputs.issue_number }}
          
          gh issue comment $ISSUE_NUM --repo ${{ inputs.repo_name }} --body "
          ✅ **Implementation Approved by @${{ github.event.comment.user.login }}**
          **Creating Pull Request**
          
          🔄 PR creation in progress..."
          
      - name: Checkout shared workflows
        uses: actions/checkout@v4
        with:
          repository: atriumn/atriumn-issue-driven-development
          path: shared-workflows
          
      - name: Checkout target repository  
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          path: target-repo
          
      - name: Get pipeline branch
        id: get-branch
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          # Get branch name from pipeline label description
          ISSUE_NUM=${{ inputs.issue_number }}
          BRANCH_NAME=$(gh api "/repos/${{ inputs.repo_name }}/issues/$ISSUE_NUM/labels" --jq -r '.[] | select(.name | startswith("pipeline-issue-")) | .description' | sed 's/^Pipeline: //')
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
      - name: Create pull request
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          ISSUE_NUM=${{ inputs.issue_number }}
          BRANCH_NAME="${{ steps.get-branch.outputs.name }}"
          BASE_BRANCH="${{ needs.load-and-validate-config.outputs.base_branch }}"
          THOUGHTS_DIR="${{ needs.load-and-validate-config.outputs.thoughts_dir }}"
          
          # Get issue details
          ISSUE_TITLE=$(gh issue view $ISSUE_NUM --repo ${{ inputs.repo_name }} --json title --jq -r '.title')
          
          # Generate PR title and body from context
          PR_TITLE="Implement: $ISSUE_TITLE (#$ISSUE_NUM)"
          
          # Get plan and research docs for PR body
          PLAN_DOC=$(find ${THOUGHTS_DIR%/}/shared/plans -name "*issue-$ISSUE_NUM*" -type f | head -1)
          RESEARCH_DOC=$(find ${THOUGHTS_DIR%/}/shared/research -name "*issue-$ISSUE_NUM*" -type f | head -1)
          DECISION_DOC="${THOUGHTS_DIR%/}/shared/decisions/pipeline-issue-$ISSUE_NUM.md"
          
          # Create PR using external script to avoid YAML parsing issues
          REPO_NAME="${{ inputs.repo_name }}"
          APPROVER_LOGIN="${{ github.event.comment.user.login }}"
          
          chmod +x shared-workflows/scripts/create-manual-pr.sh
          shared-workflows/scripts/create-manual-pr.sh \
            "$ISSUE_NUM" \
            "$ISSUE_TITLE" \
            "$BRANCH_NAME" \
            "$BASE_BRANCH" \
            "$REPO_NAME" \
            "$APPROVER_LOGIN" \
            "$RESEARCH_DOC" \
            "$PLAN_DOC" \
            "$DECISION_DOC"
          
          # Get PR number for linking
          PR_NUMBER=$(gh pr view $BRANCH_NAME --repo "$REPO_NAME" --json number --jq -r '.number')
          
          # Update issue with PR link
          gh issue comment $ISSUE_NUM --repo "$REPO_NAME" --body "
          🎉 **Pull Request Created**
          
          **PR**: #$PR_NUMBER - $PR_TITLE
          **Link**: https://github.com/$REPO_NAME/pull/$PR_NUMBER
          **Approved by**: @$APPROVER_LOGIN
          
          **Next Steps:**
          - Review and merge the PR when ready
          - Issue will be automatically closed on merge
          
          ✅ **Pipeline Complete** - Implementation approved and PR created
          "