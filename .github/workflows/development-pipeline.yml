name: Development Pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository name'
        required: true
        type: string
      issue_number:
        description: 'Issue number'
        required: true
        type: string
      branch_name:
        description: 'Branch name'
        required: false
        type: string
      pipeline_id:
        description: 'Pipeline ID'
        required: false
        type: string
      human_validation:
        description: 'Enable human validation'
        required: false
        type: boolean
        default: true
      test_mode:
        description: 'Run in test mode'
        required: false
        type: boolean
        default: false
    secrets:
      REPO_TOKEN:
        description: 'GitHub token with access to target repository'
        required: true

jobs:
  setup-pipeline:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.setup.outputs.branch_name }}
      pipeline_id: ${{ steps.setup.outputs.pipeline_id }}
      issue_title: ${{ steps.setup.outputs.issue_title }}
      decision_record: ${{ steps.setup.outputs.decision_record }}
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          
      - name: Setup pipeline
        id: setup
        run: |
          echo "üîç DEBUG: Setting up pipeline for issue #${{ inputs.issue_number }}"
          echo "üîç DEBUG: Repository name input: '${{ inputs.repo_name }}'"
          echo "üîç DEBUG: Full repository path: '${{ inputs.repo_name }}'"
          echo "üîç DEBUG: Issue number: '${{ inputs.issue_number }}'"
          echo "üîç DEBUG: GitHub context repository: '${{ github.repository }}'"
          
          # Generate branch name if not provided
          if [ -z "${{ inputs.branch_name }}" ]; then
            BRANCH_NAME="feature/issue-${{ inputs.issue_number }}-pipeline"
          else
            BRANCH_NAME="${{ inputs.branch_name }}"
          fi
          
          # Generate pipeline ID if not provided
          if [ -z "${{ inputs.pipeline_id }}" ]; then
            PIPELINE_ID="pipeline-${{ github.run_id }}-${{ inputs.issue_number }}"
          else
            PIPELINE_ID="${{ inputs.pipeline_id }}"
          fi
          
          echo "üîç DEBUG: Generated branch name: '$BRANCH_NAME'"
          echo "üîç DEBUG: Generated pipeline ID: '$PIPELINE_ID'"
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "pipeline_id=$PIPELINE_ID" >> $GITHUB_OUTPUT
          
          # Get issue title from the target repository
          echo "üîç DEBUG: About to run: gh issue view ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --json title --jq .title"
          echo "üîç DEBUG: Testing token permissions:"
          echo "üîç DEBUG: Token source check:"
          if [ -n "${{ secrets.REPO_TOKEN }}" ]; then
            echo "‚úÖ REPO_TOKEN secret is available"
            echo "üîç DEBUG: Token starts with: ${GH_TOKEN:0:10}..."
          else
            echo "‚ùå REPO_TOKEN secret is NOT available"
            echo "üîç DEBUG: Using default GITHUB_TOKEN instead"
          fi
          echo "üîç DEBUG: Can access repository info?"
          gh repo view ${{ inputs.repo_name }} --json name,owner || echo "‚ùå Cannot access repository"
          echo "üîç DEBUG: Can list issues in repository?"
          gh issue list --repo ${{ inputs.repo_name }} --limit 5 || echo "‚ùå Cannot list issues"
          echo "üîç DEBUG: Available repos for authenticated user:"
          gh repo list atriumn --limit 10
          
          ISSUE_TITLE=$(gh issue view ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --json title --jq .title)
          echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
          
          # Generate decision record content
          DECISION_RECORD_CONTENT=$(cat << 'RECORD_EOF'
          # Development Pipeline Decision Record - Issue #${{ inputs.issue_number }}
          
          **Issue:** $ISSUE_TITLE
          **Pipeline ID:** $PIPELINE_ID
          **Branch:** $BRANCH_NAME
          **Started:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Human Validation:** ${{ inputs.human_validation }}
          
          ## Pipeline Progress
          
          ### ‚úÖ Research Phase
          - **Status:** In Progress
          - **Started:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          Research phase initiated for issue #${{ inputs.issue_number }}.
          
          ### Planning Phase
          - **Status:** Pending
          
          ### Implementation Phase  
          - **Status:** Pending
          
          ### PR Phase
          - **Status:** Pending
          
          ---
          *Pipeline managed by atriumn-shared-workflows*
          RECORD_EOF
          )
          
          # Output the decision record content for the calling workflow to use
          echo "decision_record<<DECISION_RECORD_EOF" >> $GITHUB_OUTPUT
          echo "$DECISION_RECORD_CONTENT" >> $GITHUB_OUTPUT
          echo "DECISION_RECORD_EOF" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Pipeline setup complete"
          echo "   Branch: $BRANCH_NAME"
          echo "   Pipeline ID: $PIPELINE_ID"
          echo "   Issue: #${{ inputs.issue_number }} - $ISSUE_TITLE"
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}

  research-phase:
    needs: setup-pipeline
    runs-on: ubuntu-latest
    outputs:
      research_complete: ${{ steps.research.outputs.complete }}
      research_summary: ${{ steps.research.outputs.summary }}
      next_actions: ${{ steps.research.outputs.next_actions }}
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          
      - name: Research phase
        id: research
        run: |
          echo "üî¨ Starting research phase for issue #${{ inputs.issue_number }}"
          
          # Get issue details
          ISSUE_DATA=$(gh issue view ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --json title,body,labels,assignees)
          ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r '.title')
          ISSUE_BODY=$(echo "$ISSUE_DATA" | jq -r '.body')
          
          echo "üìã Issue: $ISSUE_TITLE"
          echo "üìù Description: $ISSUE_BODY"
          
          # Simulate research analysis
          RESEARCH_SUMMARY="Research completed for: $ISSUE_TITLE
          
          **Key Findings:**
          - Issue requires accessibility improvements
          - Focus areas: keyboard navigation, ARIA labels, color contrast
          - Estimated complexity: Medium
          - Files likely affected: UI components, CSS styles
          
          **Technical Approach:**
          - Audit current accessibility state
          - Implement WCAG 2.1 AA compliance
          - Add automated accessibility testing
          
          **Dependencies:**
          - Review existing accessibility testing setup
          - Check for conflicting CSS rules
          - Validate with screen readers"
          
          NEXT_ACTIONS="1. Create feature branch
          2. Audit current accessibility implementation
          3. Implement ARIA improvements
          4. Add keyboard navigation support
          5. Update CSS for better contrast
          6. Add automated tests
          7. Manual testing with assistive technologies"
          
          echo "complete=true" >> $GITHUB_OUTPUT
          echo "summary<<RESEARCH_EOF" >> $GITHUB_OUTPUT
          echo "$RESEARCH_SUMMARY" >> $GITHUB_OUTPUT
          echo "RESEARCH_EOF" >> $GITHUB_OUTPUT
          echo "next_actions<<ACTIONS_EOF" >> $GITHUB_OUTPUT
          echo "$NEXT_ACTIONS" >> $GITHUB_OUTPUT
          echo "ACTIONS_EOF" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Research phase complete"
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}

  validate-research:
    needs: research-phase
    runs-on: ubuntu-latest
    outputs:
      validation_status: ${{ steps.validate.outputs.status }}
      planning_inputs: ${{ steps.validate.outputs.planning_inputs }}
    steps:
      - name: Validate research
        id: validate
        run: |
          echo "üîç Validating research phase results"
          
          if [ "${{ needs.research-phase.outputs.research_complete }}" = "true" ]; then
            echo "‚úÖ Research validation passed"
            echo "status=approved" >> $GITHUB_OUTPUT
            
            PLANNING_INPUTS="Research Summary: ${{ needs.research-phase.outputs.research_summary }}
            
            Next Actions: ${{ needs.research-phase.outputs.next_actions }}
            
            Ready for planning phase."
            
            echo "planning_inputs<<PLANNING_EOF" >> $GITHUB_OUTPUT
            echo "$PLANNING_INPUTS" >> $GITHUB_OUTPUT
            echo "PLANNING_EOF" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Research validation failed"
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

  wait-for-approval:
    needs: [research-phase, validate-research]
    if: inputs.human_validation == true
    runs-on: ubuntu-latest
    outputs:
      approval_status: ${{ steps.wait.outputs.status }}
      approved_plan: ${{ steps.wait.outputs.plan }}
    steps:
      - name: Wait for human approval
        id: wait
        run: |
          echo "‚è≥ Human validation enabled - waiting for approval"
          echo "Research summary:"
          echo "${{ needs.research-phase.outputs.research_summary }}"
          echo ""
          echo "Next actions:"
          echo "${{ needs.research-phase.outputs.next_actions }}"
          echo ""
          echo "Comment 'approve research' on issue #${{ inputs.issue_number }} to proceed"
          
          # In a real implementation, this would wait for the approval comment
          # For now, we'll simulate approval
          echo "status=approved" >> $GITHUB_OUTPUT
          echo "plan=${{ needs.research-phase.outputs.next_actions }}" >> $GITHUB_OUTPUT

  complete-pipeline:
    needs: [setup-pipeline, research-phase, validate-research, wait-for-approval]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      pipeline_status: ${{ steps.complete.outputs.status }}
      branch_name: ${{ needs.setup-pipeline.outputs.branch_name }}
      pipeline_id: ${{ needs.setup-pipeline.outputs.pipeline_id }}
      issue_title: ${{ needs.setup-pipeline.outputs.issue_title }}
      research_summary: ${{ needs.research-phase.outputs.research_summary }}
      next_actions: ${{ needs.research-phase.outputs.next_actions }}
      decision_record_content: ${{ steps.complete.outputs.decision_record }}
      files_to_create: ${{ steps.complete.outputs.files_to_create }}
      git_commands: ${{ steps.complete.outputs.git_commands }}
    steps:
      - name: Complete pipeline
        id: complete
        run: |
          echo "üèÅ Completing pipeline for issue #${{ inputs.issue_number }}"
          
          if [ "${{ needs.validate-research.outputs.validation_status }}" = "approved" ]; then
            echo "‚úÖ Pipeline completed successfully"
            echo "status=success" >> $GITHUB_OUTPUT
            
            # Generate decision record content
            CURRENT_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            DECISION_RECORD="# Development Pipeline Decision Record - Issue #${{ inputs.issue_number }}

**Issue:** ${{ needs.setup-pipeline.outputs.issue_title }}
**Pipeline ID:** ${{ needs.setup-pipeline.outputs.pipeline_id }}
**Branch:** ${{ needs.setup-pipeline.outputs.branch_name }}
**Started:** $CURRENT_TIME
**Completed:** $CURRENT_TIME
**Status:** Research Complete - Ready for Implementation

## Research Summary

${{ needs.research-phase.outputs.research_summary }}

## Next Actions

${{ needs.research-phase.outputs.next_actions }}

## Pipeline Progress

### ‚úÖ Research Phase
- **Status:** Complete
- **Completed:** $CURRENT_TIME

### üìã Planning Phase
- **Status:** Ready to Start
- **Input:** Research findings validated

### üöß Implementation Phase  
- **Status:** Pending Planning

### üîÑ PR Phase
- **Status:** Pending Implementation

---
*Pipeline managed by atriumn-shared-workflows*"

            # Define files that need to be created by the calling workflow
            FILES_TO_CREATE="{\"decision_record\":{\"path\":\"thoughts/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md\",\"content\":\"$DECISION_RECORD\"}}"
            
            # Define git commands for the calling workflow to execute  
            GIT_COMMANDS="[\"git config user.name 'Pipeline Bot'\",\"git config user.email 'pipeline@atriumn.com'\",\"git add thoughts/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md\",\"git commit -m 'Add pipeline decision record for issue #${{ inputs.issue_number }}'\",\"git push origin ${{ needs.setup-pipeline.outputs.branch_name }}\"]"
            
            echo "decision_record<<DECISION_EOF" >> $GITHUB_OUTPUT
            echo "$DECISION_RECORD" >> $GITHUB_OUTPUT
            echo "DECISION_EOF" >> $GITHUB_OUTPUT
            
            echo "files_to_create<<FILES_EOF" >> $GITHUB_OUTPUT
            echo "$FILES_TO_CREATE" >> $GITHUB_OUTPUT
            echo "FILES_EOF" >> $GITHUB_OUTPUT
            
            echo "git_commands<<GIT_EOF" >> $GITHUB_OUTPUT
            echo "$GIT_COMMANDS" >> $GITHUB_OUTPUT
            echo "GIT_EOF" >> $GITHUB_OUTPUT
            
          else
            echo "‚ùå Pipeline failed - research validation not approved"
            echo "status=failed" >> $GITHUB_OUTPUT
          fi
          
          echo "Pipeline outputs available for calling workflow to process"

  create-branch:
    needs: setup-pipeline
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.branch.outputs.name }}
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          
      - name: Create feature branch
        id: branch
        run: |
          BRANCH_NAME="${{ needs.setup-pipeline.outputs.branch_name }}"
          echo "Creating branch: $BRANCH_NAME"
          
          # Check if branch already exists
          if git show-ref --verify --quiet refs/remotes/origin/$BRANCH_NAME; then
            echo "Branch already exists, switching to it"
            git checkout $BRANCH_NAME
          else
            echo "Creating new branch"
            git checkout -b $BRANCH_NAME
            git push -u origin $BRANCH_NAME
          fi
          
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Branch ready: $BRANCH_NAME"

  create-decision-record:
    needs: [complete-pipeline, create-branch]
    if: needs.complete-pipeline.outputs.pipeline_status == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          ref: ${{ needs.create-branch.outputs.branch_name }}
          fetch-depth: 0
          
      - name: Create decision record
        run: |
          echo "Creating pipeline decision record..."
          mkdir -p thoughts/shared/decisions
          
          cat > thoughts/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md << 'EOF'
          ${{ needs.complete-pipeline.outputs.decision_record_content }}
          EOF
          
          git config user.name "Pipeline Bot"
          git config user.email "pipeline@atriumn.com"
          git add thoughts/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md
          git commit -m "Add pipeline decision record for issue #${{ inputs.issue_number }}"
          git push origin ${{ needs.create-branch.outputs.branch_name }}
          
          echo "‚úÖ Decision record created and pushed"