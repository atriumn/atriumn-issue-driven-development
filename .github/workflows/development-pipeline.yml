name: Atriumn Reusable Pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
      issue_number:
        required: true
        type: string
      feature_ref:
        required: true
        type: string
      action:
        required: true
        type: string   # "run" or "approve"
      phase:
        required: true
        type: string   # "research" | "plan" | "implement" | "validate"
      task_description:
        required: false
        type: string
      trigger_comment:
        required: false
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read
  id-token: write

jobs:
  run-phase:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout consumer repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          ref: ${{ inputs.feature_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure feature branch exists (create if missing)
        shell: bash
        run: |
          set -euo pipefail
          BR="${{ inputs.feature_ref }}"
          if ! git rev-parse --verify --quiet "$BR"; then
            git fetch origin "${BR}" || true
            if ! git rev-parse --verify --quiet "origin/${BR}"; then
              # create from default branch
              DEFAULT_BRANCH="$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')"
              git checkout -b "$BR" "origin/${DEFAULT_BRANCH}"
            else
              git checkout -b "$BR" "origin/${BR}"
            fi
          else
            git checkout "$BR"
          fi
          git status

      - name: Checkout shared repo (to load task-packs)
        uses: actions/checkout@v4
        with:
          repository: atriumn/atriumn-issue-driven-development
          ref: main
          path: _shared

      - name: Load task-pack prompt for phase
        id: load_prompt
        uses: actions/github-script@v7
        env:
          PHASE: ${{ inputs.phase }}
        with:
          script: |
            const fs = require('fs');
            const phase = process.env.PHASE;
            if (!phase) {
              core.setFailed('Phase input is required');
              return;
            }
            const promptPath = `_shared/.atriumn/task-packs/${phase}.md`;
            if (!fs.existsSync(promptPath)) {
              core.setFailed(`Missing task-pack prompt: ${promptPath}`);
              return;
            }
            const prompt = fs.readFileSync(promptPath, 'utf8');
            core.setOutput('prompt', prompt);

          result-encoding: string

      - name: Run Claude Code (single-session, direct prompt)
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          allowed_tools: |
            Read
            Write
            Edit
            MultiEdit
            Grep
            Glob
            LS
            TodoWrite

          # Allow App/bot actors in case a maintainer runs this via re-runs, etc.
          allowed_bots: "*"

          # Pass a fully-rendered prompt to Claude
          direct_prompt: |
            ${{ steps.load_prompt.outputs.prompt }}

            ---
            # Context variables (for the prompt to interpolate):
            feature_ref = "${{ inputs.feature_ref }}"
            issue_number = "${{ inputs.issue_number }}"
            repository = "${{ inputs.repo_name }}"
            task_description = "${{ inputs.task_description }}"
            output_path = "thoughts/shared/research/issue-${{ inputs.issue_number }}.md"
            decision_record_path = "thoughts/shared/decisions/issue-${{ inputs.issue_number }}.md"
            phase = "${{ inputs.phase }}"
            action = "${{ inputs.action }}"
            trigger_comment = "${{ inputs.trigger_comment }}"

      - name: Commit & push any files Claude wrote
        if: always()
        shell: bash
        run: |
          set -e
          git config user.name  "atriumn-bot"
          git config user.email "bot@atriumn.dev"
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "Atriumn ${{
              inputs.phase
            }} artifacts for issue #${{ inputs.issue_number }}"
            git push origin "${{ inputs.feature_ref }}"
          else
            echo "No changes to commit."
          fi