name: Development Pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository name'
        required: true
        type: string
      issue_number:
        description: 'Issue number'
        required: true
        type: string
      branch_name:
        description: 'Branch name'
        required: false
        type: string
      pipeline_id:
        description: 'Pipeline ID'
        required: false
        type: string
      human_validation:
        description: 'Enable human validation'
        required: false
        type: boolean
        default: true
      test_mode:
        description: 'Run in test mode'
        required: false
        type: boolean
        default: false
    secrets:
      REPO_TOKEN:
        description: 'GitHub token with access to target repository'
        required: true

jobs:
  setup-pipeline:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.setup.outputs.branch_name }}
      pipeline_id: ${{ steps.setup.outputs.pipeline_id }}
      issue_title: ${{ steps.setup.outputs.issue_title }}
      decision_record: ${{ steps.setup.outputs.decision_record }}
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          
      - name: Setup pipeline
        id: setup
        run: |
          echo "🔍 DEBUG: Setting up pipeline for issue #${{ inputs.issue_number }}"
          echo "🔍 DEBUG: Repository name input: '${{ inputs.repo_name }}'"
          echo "🔍 DEBUG: Full repository path: '${{ inputs.repo_name }}'"
          echo "🔍 DEBUG: Issue number: '${{ inputs.issue_number }}'"
          echo "🔍 DEBUG: GitHub context repository: '${{ github.repository }}'"
          
          # Generate branch name if not provided
          if [ -z "${{ inputs.branch_name }}" ]; then
            BRANCH_NAME="feature/issue-${{ inputs.issue_number }}-pipeline"
          else
            BRANCH_NAME="${{ inputs.branch_name }}"
          fi
          
          # Generate pipeline ID if not provided
          if [ -z "${{ inputs.pipeline_id }}" ]; then
            PIPELINE_ID="pipeline-${{ github.run_id }}-${{ inputs.issue_number }}"
          else
            PIPELINE_ID="${{ inputs.pipeline_id }}"
          fi
          
          echo "🔍 DEBUG: Generated branch name: '$BRANCH_NAME'"
          echo "🔍 DEBUG: Generated pipeline ID: '$PIPELINE_ID'"
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "pipeline_id=$PIPELINE_ID" >> $GITHUB_OUTPUT
          
          # Get issue title from the target repository
          echo "🔍 DEBUG: About to run: gh issue view ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --json title --jq .title"
          echo "🔍 DEBUG: Testing token permissions:"
          echo "🔍 DEBUG: Token source check:"
          if [ -n "${{ secrets.REPO_TOKEN }}" ]; then
            echo "✅ REPO_TOKEN secret is available"
            echo "🔍 DEBUG: Token starts with: ${GH_TOKEN:0:10}..."
          else
            echo "❌ REPO_TOKEN secret is NOT available"
            echo "🔍 DEBUG: Using default GITHUB_TOKEN instead"
          fi
          echo "🔍 DEBUG: Can access repository info?"
          gh repo view ${{ inputs.repo_name }} --json name,owner || echo "❌ Cannot access repository"
          echo "🔍 DEBUG: Can list issues in repository?"
          gh issue list --repo ${{ inputs.repo_name }} --limit 5 || echo "❌ Cannot list issues"
          echo "🔍 DEBUG: Available repos for authenticated user:"
          gh repo list atriumn --limit 10
          
          ISSUE_TITLE=$(gh issue view ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --json title --jq .title)
          echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
          
          # Generate decision record content
          DECISION_RECORD_CONTENT=$(cat << 'RECORD_EOF'
          # Development Pipeline Decision Record - Issue #${{ inputs.issue_number }}
          
          **Issue:** $ISSUE_TITLE
          **Pipeline ID:** $PIPELINE_ID
          **Branch:** $BRANCH_NAME
          **Started:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Human Validation:** ${{ inputs.human_validation }}
          
          ## Pipeline Progress
          
          ### ✅ Research Phase
          - **Status:** In Progress
          - **Started:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          Research phase initiated for issue #${{ inputs.issue_number }}.
          
          ### Planning Phase
          - **Status:** Pending
          
          ### Implementation Phase  
          - **Status:** Pending
          
          ### PR Phase
          - **Status:** Pending
          
          ---
          *Pipeline managed by atriumn-shared-workflows*
          RECORD_EOF
          )
          
          # Output the decision record content for the calling workflow to use
          echo "decision_record<<DECISION_RECORD_EOF" >> $GITHUB_OUTPUT
          echo "$DECISION_RECORD_CONTENT" >> $GITHUB_OUTPUT
          echo "DECISION_RECORD_EOF" >> $GITHUB_OUTPUT
          
          echo "✅ Pipeline setup complete"
          echo "   Branch: $BRANCH_NAME"
          echo "   Pipeline ID: $PIPELINE_ID"
          echo "   Issue: #${{ inputs.issue_number }} - $ISSUE_TITLE"
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}

  research-phase:
    needs: setup-pipeline
    runs-on: ubuntu-latest
    outputs:
      research_complete: ${{ steps.research.outputs.complete }}
      research_summary: ${{ steps.research.outputs.summary }}
      next_actions: ${{ steps.research.outputs.next_actions }}
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          
      - name: Research phase
        id: research
        run: |
          echo "🔬 Starting research phase for issue #${{ inputs.issue_number }}"
          
          # Get issue details
          ISSUE_DATA=$(gh issue view ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --json title,body,labels,assignees)
          ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r '.title')
          ISSUE_BODY=$(echo "$ISSUE_DATA" | jq -r '.body')
          
          echo "📋 Issue: $ISSUE_TITLE"
          echo "📝 Description: $ISSUE_BODY"
          
          # Simulate research analysis
          RESEARCH_SUMMARY="Research completed for: $ISSUE_TITLE
          
          **Key Findings:**
          - Issue requires accessibility improvements
          - Focus areas: keyboard navigation, ARIA labels, color contrast
          - Estimated complexity: Medium
          - Files likely affected: UI components, CSS styles
          
          **Technical Approach:**
          - Audit current accessibility state
          - Implement WCAG 2.1 AA compliance
          - Add automated accessibility testing
          
          **Dependencies:**
          - Review existing accessibility testing setup
          - Check for conflicting CSS rules
          - Validate with screen readers"
          
          NEXT_ACTIONS="- Create feature branch
          - Audit current accessibility implementation  
          - Implement ARIA improvements
          - Add keyboard navigation support
          - Update CSS for better contrast
          - Add automated tests
          - Manual testing with assistive technologies"
          
          echo "complete=true" >> $GITHUB_OUTPUT
          # Use simpler output format to avoid GitHub Actions parsing issues
          echo "summary=Research completed for accessibility improvements. Key findings: keyboard navigation, ARIA labels, color contrast needed. Estimated complexity: Medium." >> $GITHUB_OUTPUT
          echo "next_actions=Create feature branch, Audit accessibility, Implement ARIA improvements, Add keyboard navigation, Update CSS contrast, Add automated tests, Manual testing" >> $GITHUB_OUTPUT
          
          # Create research document using echo to avoid YAML parsing issues
          mkdir -p thoughts/shared/research
          {
            echo "# Research Document - Issue #${{ inputs.issue_number }}"
            echo ""
            echo "Date: $(date -u +'%Y-%m-%d')"
            echo "Researcher: Pipeline Bot"
            echo "Issue: ${{ needs.setup-pipeline.outputs.issue_title }}"
            echo ""
            echo "## Research Question"
            echo "How should we implement the requested changes for this issue?"
            echo ""
            echo "## Summary"
            echo "Research completed for accessibility improvements. Key findings indicate need for keyboard navigation, ARIA labels, and color contrast improvements. Estimated complexity is Medium."
            echo ""
            echo "## Detailed Findings"
            echo ""
            echo "### Key Requirements"
            echo "- Issue requires accessibility improvements"
            echo "- Focus areas: keyboard navigation, ARIA labels, color contrast"
            echo "- Estimated complexity: Medium"
            echo "- Files likely affected: UI components, CSS styles"
            echo ""
            echo "### Technical Approach"
            echo "- Audit current accessibility state"
            echo "- Implement WCAG 2.1 AA compliance"
            echo "- Add automated accessibility testing"
            echo ""
            echo "### Dependencies"
            echo "- Review existing accessibility testing setup"
            echo "- Check for conflicting CSS rules"
            echo "- Validate with screen readers"
            echo ""
            echo "## Code References"
            echo "- UI components in /src/components/"
            echo "- CSS styles in /src/styles/"
            echo "- Test files in /src/tests/"
            echo ""
            echo "## Architecture Insights"
            echo "Current accessibility implementation needs enhancement to meet WCAG standards."
            echo ""
            echo "## Next Steps"
            echo "- Create feature branch"
            echo "- Audit current accessibility implementation"
            echo "- Implement ARIA improvements"
            echo "- Add keyboard navigation support"
            echo "- Update CSS for better contrast"
            echo "- Add automated tests"
            echo "- Manual testing with assistive technologies"
          } > thoughts/shared/research/issue-${{ inputs.issue_number }}-research.md

          git add thoughts/shared/research/issue-${{ inputs.issue_number }}-research.md
          git commit -m "Add research document for issue #${{ inputs.issue_number }}"
          git push origin ${{ needs.setup-pipeline.outputs.branch_name }}
          
          echo "✅ Research phase complete - document created"
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}

  validate-research:
    needs: research-phase
    runs-on: ubuntu-latest
    outputs:
      validation_status: ${{ steps.validate.outputs.status }}
      planning_inputs: ${{ steps.validate.outputs.planning_inputs }}
    steps:
      - name: Validate research
        id: validate
        run: |
          echo "🔍 Validating research phase results"
          
          if [ "${{ needs.research-phase.outputs.research_complete }}" = "true" ]; then
            echo "✅ Research validation passed"
            echo "status=approved" >> $GITHUB_OUTPUT
            
            PLANNING_INPUTS="Research Summary: ${{ needs.research-phase.outputs.research_summary }}
            
            Next Actions: ${{ needs.research-phase.outputs.next_actions }}
            
            Ready for planning phase."
            
            echo "planning_inputs<<PLANNING_EOF" >> $GITHUB_OUTPUT
            echo "$PLANNING_INPUTS" >> $GITHUB_OUTPUT
            echo "PLANNING_EOF" >> $GITHUB_OUTPUT
          else
            echo "❌ Research validation failed"
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

  wait-for-approval:
    needs: [research-phase, validate-research]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      approval_status: ${{ steps.wait.outputs.status }}
      approved_plan: ${{ steps.wait.outputs.plan }}
    steps:
      - name: Wait for human approval
        id: wait
        run: |
          if [ "${{ inputs.human_validation }}" = "true" ]; then
            echo "⏳ Human validation enabled - waiting for approval"
            echo ""
            echo "=== RESEARCH SUMMARY ==="
            echo "${{ needs.research-phase.outputs.summary }}"
            echo ""
            echo "=== NEXT ACTIONS ==="
            echo "${{ needs.research-phase.outputs.next_actions }}"
            echo ""
            echo "=== APPROVAL REQUIRED ==="
            echo "Comment 'approve research' on issue #${{ inputs.issue_number }} to proceed"
            echo ""
            
            # In a real implementation, this would wait for the approval comment
            # For now, we'll simulate approval
            echo "status=approved" >> $GITHUB_OUTPUT
            echo "plan=${{ needs.research-phase.outputs.next_actions }}" >> $GITHUB_OUTPUT
          else
            echo "🤖 Human validation disabled - auto-approving"
            echo ""
            echo "=== RESEARCH SUMMARY ==="
            echo "${{ needs.research-phase.outputs.summary }}"
            echo ""
            echo "=== NEXT ACTIONS ==="
            echo "${{ needs.research-phase.outputs.next_actions }}"
            echo ""
            echo "status=approved" >> $GITHUB_OUTPUT
            echo "plan=${{ needs.research-phase.outputs.next_actions }}" >> $GITHUB_OUTPUT
          fi

  complete-pipeline:
    needs: [setup-pipeline, research-phase, validate-research, wait-for-approval]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      pipeline_status: ${{ steps.complete.outputs.status }}
      branch_name: ${{ needs.setup-pipeline.outputs.branch_name }}
      pipeline_id: ${{ needs.setup-pipeline.outputs.pipeline_id }}
      issue_title: ${{ needs.setup-pipeline.outputs.issue_title }}
      research_summary: ${{ needs.research-phase.outputs.research_summary }}
      next_actions: ${{ needs.research-phase.outputs.next_actions }}
      decision_record_content: ${{ steps.complete.outputs.decision_record_content }}
    steps:
      - name: Complete pipeline
        id: complete
        run: |
          echo "🏁 Completing pipeline for issue #${{ inputs.issue_number }}"
          
          if [ "${{ needs.validate-research.outputs.validation_status }}" = "approved" ]; then
            echo "✅ Pipeline completed successfully"
            echo "status=success" >> $GITHUB_OUTPUT
            
            # Create decision record file using echo to avoid YAML parsing issues
            mkdir -p thoughts/shared/decisions
            CURRENT_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            
            {
              echo "# Development Pipeline Decision Record - Issue #${{ inputs.issue_number }}"
              echo ""
              echo "Issue: ${{ needs.setup-pipeline.outputs.issue_title }}"
              echo "Pipeline ID: ${{ needs.setup-pipeline.outputs.pipeline_id }}"
              echo "Branch: ${{ needs.setup-pipeline.outputs.branch_name }}"
              echo "Started: $CURRENT_TIME"
              echo "Completed: $CURRENT_TIME"
              echo "Status: Research Complete"
              echo ""
              echo "## Research Summary"
              echo "Research completed for accessibility improvements. Key findings indicate need for keyboard navigation, ARIA labels, and color contrast improvements."
              echo ""
              echo "## Next Actions"
              echo "- Create feature branch ✅"
              echo "- Audit current accessibility implementation"
              echo "- Implement ARIA improvements"
              echo "- Add keyboard navigation support"
              echo "- Update CSS for better contrast"
              echo "- Add automated tests"
              echo "- Manual testing with assistive technologies"
              echo ""
              echo "## Research Document"
              echo "See: thoughts/shared/research/issue-${{ inputs.issue_number }}-research.md"
              echo ""
              echo "---"
              echo "Pipeline managed by atriumn-shared-workflows"
            } > thoughts/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md
            
            git add thoughts/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md
            git commit -m "Add pipeline decision record for issue #${{ inputs.issue_number }}"
            git push origin ${{ needs.setup-pipeline.outputs.branch_name }}
            
            echo "decision_record_content=Decision record created at thoughts/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md" >> $GITHUB_OUTPUT
            
          else
            echo "❌ Pipeline failed - research validation not approved"
            echo "status=failed" >> $GITHUB_OUTPUT
          fi
          
          echo "Pipeline outputs available for calling workflow to process"

  create-branch:
    needs: setup-pipeline
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.branch.outputs.name }}
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          
      - name: Create feature branch
        id: branch
        run: |
          BRANCH_NAME="${{ needs.setup-pipeline.outputs.branch_name }}"
          echo "Creating branch: $BRANCH_NAME"
          
          # Check if branch already exists
          if git show-ref --verify --quiet refs/remotes/origin/$BRANCH_NAME; then
            echo "Branch already exists, switching to it"
            git checkout $BRANCH_NAME
          else
            echo "Creating new branch"
            git checkout -b $BRANCH_NAME
            git push -u origin $BRANCH_NAME
          fi
          
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "✅ Branch ready: $BRANCH_NAME"

  create-decision-record:
    needs: [complete-pipeline, create-branch]
    if: needs.complete-pipeline.outputs.pipeline_status == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          ref: ${{ needs.create-branch.outputs.branch_name }}
          fetch-depth: 0
          
      - name: Create decision record
        run: |
          echo "Creating pipeline decision record..."
          mkdir -p thoughts/shared/decisions
          
          cat > thoughts/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md << 'EOF'
          ${{ needs.complete-pipeline.outputs.decision_record_content }}
          EOF
          
          git config user.name "Pipeline Bot"
          git config user.email "pipeline@atriumn.com"
          git add thoughts/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md
          git commit -m "Add pipeline decision record for issue #${{ inputs.issue_number }}"
          git push origin ${{ needs.create-branch.outputs.branch_name }}
          
          echo "✅ Decision record created and pushed"