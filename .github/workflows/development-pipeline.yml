name: Development Pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository name'
        required: true
        type: string
      issue_number:
        description: 'Issue number'
        required: true
        type: string
      branch_name:
        description: 'Branch name'
        required: false
        type: string
      pipeline_id:
        description: 'Pipeline ID'
        required: false
        type: string
      human_validation:
        description: 'Enable human validation'
        required: false
        type: boolean
        default: true
      test_mode:
        description: 'Run in test mode'
        required: false
        type: boolean
        default: false

jobs:
  setup-pipeline:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.setup.outputs.branch_name }}
      pipeline_id: ${{ steps.setup.outputs.pipeline_id }}
      issue_title: ${{ steps.setup.outputs.issue_title }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Setup pipeline
        id: setup
        run: |
          echo "Setting up pipeline for issue #${{ inputs.issue_number }}"
          
          # Generate branch name if not provided
          if [ -z "${{ inputs.branch_name }}" ]; then
            BRANCH_NAME="feature/issue-${{ inputs.issue_number }}-pipeline"
          else
            BRANCH_NAME="${{ inputs.branch_name }}"
          fi
          
          # Generate pipeline ID if not provided
          if [ -z "${{ inputs.pipeline_id }}" ]; then
            PIPELINE_ID="pipeline-${{ github.run_id }}-${{ inputs.issue_number }}"
          else
            PIPELINE_ID="${{ inputs.pipeline_id }}"
          fi
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "pipeline_id=$PIPELINE_ID" >> $GITHUB_OUTPUT
          
          # Get issue title
          ISSUE_TITLE=$(gh issue view ${{ inputs.issue_number }} --json title --jq .title)
          echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
          
          echo "✅ Pipeline setup complete"
          echo "   Branch: $BRANCH_NAME"
          echo "   Pipeline ID: $PIPELINE_ID"
          echo "   Issue: #${{ inputs.issue_number }} - $ISSUE_TITLE"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-branch:
    needs: setup-pipeline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Create feature branch
        run: |
          echo "Creating branch: ${{ needs.setup-pipeline.outputs.branch_name }}"
          
          # Check if branch already exists
          if git show-ref --verify --quiet refs/remotes/origin/${{ needs.setup-pipeline.outputs.branch_name }}; then
            echo "Branch already exists, switching to it"
            git checkout ${{ needs.setup-pipeline.outputs.branch_name }}
          else
            echo "Creating new branch"
            git checkout -b ${{ needs.setup-pipeline.outputs.branch_name }}
            git push -u origin ${{ needs.setup-pipeline.outputs.branch_name }}
          fi
          
          echo "✅ Branch ready: ${{ needs.setup-pipeline.outputs.branch_name }}"

  research-phase:
    needs: [setup-pipeline, create-branch]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout shared workflows
        uses: actions/checkout@v4
        with:
          repository: atriumn/atriumn-shared-workflows
          token: ${{ secrets.GITHUB_TOKEN }}
          path: .shared-workflows
          
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.setup-pipeline.outputs.branch_name }}
          path: .target-repo
          
      - name: Initialize decision record
        run: |
          cd .target-repo
          mkdir -p thoughts/shared/decisions
          
          cat > thoughts/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md << 'EOF'
          # Development Pipeline Decision Record - Issue #${{ inputs.issue_number }}
          
          **Issue:** ${{ needs.setup-pipeline.outputs.issue_title }}
          **Pipeline ID:** ${{ needs.setup-pipeline.outputs.pipeline_id }}
          **Branch:** ${{ needs.setup-pipeline.outputs.branch_name }}
          **Started:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Human Validation:** ${{ inputs.human_validation }}
          
          ## Pipeline Progress
          
          ### ✅ Research Phase
          - **Status:** In Progress
          - **Started:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          Research phase initiated for issue #${{ inputs.issue_number }}.
          
          ### Planning Phase
          - **Status:** Pending
          
          ### Implementation Phase  
          - **Status:** Pending
          
          ### PR Phase
          - **Status:** Pending
          
          ---
          *Pipeline managed by atriumn-shared-workflows*
          EOF
          
          git config user.name "Pipeline Bot"
          git config user.email "pipeline@atriumn.com"
          git add thoughts/shared/decisions/pipeline-issue-${{ inputs.issue_number }}.md
          git commit -m "Initialize pipeline decision record for issue #${{ inputs.issue_number }}"
          git push origin ${{ needs.setup-pipeline.outputs.branch_name }}
          
          echo "✅ Decision record initialized"

  validate-research:
    needs: [setup-pipeline, research-phase]
    runs-on: ubuntu-latest
    if: ${{ !inputs.test_mode }}
    steps:
      - name: Checkout shared workflows
        uses: actions/checkout@v4
        with:
          repository: atriumn/atriumn-shared-workflows
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.setup-pipeline.outputs.branch_name }}
          path: .target-repo
          
      - name: Install dependencies
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          
      - name: Run research validation
        run: |
          echo "🔍 Research phase validation would run here"
          echo "This is a simplified version for testing"
          echo "✅ Research validation complete"

  wait-for-approval:
    needs: [setup-pipeline, validate-research]
    runs-on: ubuntu-latest
    if: ${{ inputs.human_validation && !inputs.test_mode }}
    steps:
      - name: Post approval request
        run: |
          gh issue comment ${{ inputs.issue_number }} --body "## 🔄 Research Phase Complete
          
          **Pipeline ID:** ${{ needs.setup-pipeline.outputs.pipeline_id }}
          **Branch:** ${{ needs.setup-pipeline.outputs.branch_name }}
          
          Research phase has completed successfully. 
          
          **Next Steps:**
          - Review the research findings
          - Comment \`approve research\` to proceed to planning phase
          - Or comment \`reject research\` to halt the pipeline
          
          **Workflow:** [View Progress](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  complete-pipeline:
    needs: [setup-pipeline, validate-research]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Update decision record
        run: |
          echo "Pipeline completed for issue #${{ inputs.issue_number }}"
          
          if [ "${{ needs.validate-research.result }}" = "success" ]; then
            STATUS="✅ Research phase completed successfully"
          else
            STATUS="❌ Research phase failed"
          fi
          
          gh issue comment ${{ inputs.issue_number }} --body "## 📊 Pipeline Update
          
          **Pipeline ID:** ${{ needs.setup-pipeline.outputs.pipeline_id }}
          **Status:** $STATUS
          **Workflow:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ${{ inputs.test_mode && 'This was a test run.' || '' }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}