name: Atriumn Reusable Pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
      issue_number:
        required: true
        type: string
      pr_number:
        required: true
        type: string
      head_sha:
        required: true
        type: string
      phase:
        required: true
        type: string
      task_description:
        required: false
        type: string
    secrets:
      CLAUDE_CODE_OAUTH_TOKEN:
        required: true

permissions:
  contents: write
  issues: write
  pull-requests: write
  checks: write

jobs:
  run-phase:
    runs-on: ubuntu-latest
    steps:
      - name: 'Create Status Check: In Progress'
        id: create_check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const phase = '${{ inputs.phase }}';
            const phaseTitle = phase.charAt(0).toUpperCase() + phase.slice(1);
            const checkName = `Atriumn Phase: ${phaseTitle}`;

            const { data: check } = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: checkName,
              head_sha: '${{ inputs.head_sha }}',
              status: 'in_progress',
              output: {
                title: `Running ${phaseTitle}`,
                summary: 'The AI agent is currently executing the ${phase} phase.'
              }
            });
            return check.id;

      - name: Checkout consumer repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          ref: feature/issue-${{ inputs.issue_number }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure output directories exist
        run: |
          mkdir -p thoughts/shared/{research,decisions,plans}/tmp

      - name: Checkout shared repo (to load task-packs)
        uses: actions/checkout@v4
        with:
          repository: atriumn/atriumn-issue-driven-development
          ref: main
          path: _shared

      - name: Load task-pack prompt for phase
        id: load_prompt
        run: |
          PROMPT_PATH="_shared/.atriumn/task-packs/${{ inputs.phase }}.md"
          if [[ ! -f "$PROMPT_PATH" ]]; then
            echo "Missing task-pack prompt: $PROMPT_PATH" >&2
            exit 1
          fi
          # Read and escape the prompt for JSON embedding
          PROMPT_CONTENT=$(cat "$PROMPT_PATH")
          echo "prompt<<EOF" >> $GITHUB_ENV
          echo "$PROMPT_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Run Claude Code Agent
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          timeout_minutes: 40
          allowed_tools: "Read,Write,Edit,MultiEdit,Grep,Glob,LS,TodoWrite"
          direct_prompt: |
            ${{ env.prompt }}
            ---
            # Context variables:
            feature_ref = "feature/issue-${{ inputs.issue_number }}"
            issue_number = "${{ inputs.issue_number }}"
            repository = "${{ inputs.repo_name }}"
            task_description = "${{ inputs.task_description }}"
            phase = "${{ inputs.phase }}"

      - name: Commit & push artifacts
        run: |
          git config user.name "atriumn-bot"
          git config user.email "bot@atriumn.dev"
          git add thoughts/
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "feat(${{ inputs.phase }}): AI-generated artifacts for issue #${{ inputs.issue_number }}"
            git push origin "feature/issue-${{ inputs.issue_number }}"
          fi
      
      - name: 'Update Status Check: Success'
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const phase = '${{ inputs.phase }}';
            const phaseTitle = phase.charAt(0).toUpperCase() + phase.slice(1);
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ steps.create_check.outputs.result }},
              status: 'completed',
              conclusion: 'success',
              output: {
                title: `${phaseTitle} Phase Complete!`,
                summary: 'The AI agent successfully completed the ${phase} phase. The generated artifacts have been committed. Please review the changes in the PR and provide your approval to proceed to the next phase.'
              }
            });

      - name: 'Update Status Check: Failure'
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const phase = '${{ inputs.phase }}';
            const phaseTitle = phase.charAt(0).toUpperCase() + phase.slice(1);
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ steps.create_check.outputs.result }},
              status: 'completed',
              conclusion: 'failure',
              output: {
                title: `${phaseTitle} Phase Failed`,
                summary: 'The AI agent encountered an error during the ${phase} phase. Please check the workflow logs for details.'
              }
            });