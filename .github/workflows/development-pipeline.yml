name: Development Pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository name'
        required: true
        type: string
      issue_number:
        description: 'Issue number'
        required: true
        type: string
      branch_name:
        description: 'Branch name'
        required: false
        type: string
      pipeline_id:
        description: 'Pipeline ID'
        required: false
        type: string
      human_validation:
        description: 'Enable human validation'
        required: false
        type: boolean
        default: true
      test_mode:
        description: 'Run in test mode'
        required: false
        type: boolean
        default: false
    secrets:
      REPO_TOKEN:
        description: 'GitHub token with access to target repository'
        required: true

jobs:
  setup-pipeline:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.setup.outputs.branch_name }}
      pipeline_id: ${{ steps.setup.outputs.pipeline_id }}
      issue_title: ${{ steps.setup.outputs.issue_title }}
      decision_record: ${{ steps.setup.outputs.decision_record }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Setup pipeline
        id: setup
        run: |
          echo "🔍 DEBUG: Setting up pipeline for issue #${{ inputs.issue_number }}"
          echo "🔍 DEBUG: Repository name input: '${{ inputs.repo_name }}'"
          echo "🔍 DEBUG: Full repository path: '${{ inputs.repo_name }}'"
          echo "🔍 DEBUG: Issue number: '${{ inputs.issue_number }}'"
          echo "🔍 DEBUG: GitHub context repository: '${{ github.repository }}'"
          
          # Generate branch name if not provided
          if [ -z "${{ inputs.branch_name }}" ]; then
            BRANCH_NAME="feature/issue-${{ inputs.issue_number }}-pipeline"
          else
            BRANCH_NAME="${{ inputs.branch_name }}"
          fi
          
          # Generate pipeline ID if not provided
          if [ -z "${{ inputs.pipeline_id }}" ]; then
            PIPELINE_ID="pipeline-${{ github.run_id }}-${{ inputs.issue_number }}"
          else
            PIPELINE_ID="${{ inputs.pipeline_id }}"
          fi
          
          echo "🔍 DEBUG: Generated branch name: '$BRANCH_NAME'"
          echo "🔍 DEBUG: Generated pipeline ID: '$PIPELINE_ID'"
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "pipeline_id=$PIPELINE_ID" >> $GITHUB_OUTPUT
          
          # Get issue title from the target repository
          echo "🔍 DEBUG: About to run: gh issue view ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --json title --jq .title"
          echo "🔍 DEBUG: Testing token permissions:"
          echo "🔍 DEBUG: Token source check:"
          if [ -n "${{ secrets.REPO_TOKEN }}" ]; then
            echo "✅ REPO_TOKEN secret is available"
            echo "🔍 DEBUG: Token starts with: ${GH_TOKEN:0:10}..."
          else
            echo "❌ REPO_TOKEN secret is NOT available"
            echo "🔍 DEBUG: Using default GITHUB_TOKEN instead"
          fi
          echo "🔍 DEBUG: Can access repository info?"
          gh repo view ${{ inputs.repo_name }} --json name,owner || echo "❌ Cannot access repository"
          echo "🔍 DEBUG: Can list issues in repository?"
          gh issue list --repo ${{ inputs.repo_name }} --limit 5 || echo "❌ Cannot list issues"
          echo "🔍 DEBUG: Available repos for authenticated user:"
          gh repo list atriumn --limit 10
          
          ISSUE_TITLE=$(gh issue view ${{ inputs.issue_number }} --repo ${{ inputs.repo_name }} --json title --jq .title)
          echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
          
          # Generate decision record content
          DECISION_RECORD_CONTENT=$(cat << 'RECORD_EOF'
          # Development Pipeline Decision Record - Issue #${{ inputs.issue_number }}
          
          **Issue:** $ISSUE_TITLE
          **Pipeline ID:** $PIPELINE_ID
          **Branch:** $BRANCH_NAME
          **Started:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Human Validation:** ${{ inputs.human_validation }}
          
          ## Pipeline Progress
          
          ### ✅ Research Phase
          - **Status:** In Progress
          - **Started:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          Research phase initiated for issue #${{ inputs.issue_number }}.
          
          ### Planning Phase
          - **Status:** Pending
          
          ### Implementation Phase  
          - **Status:** Pending
          
          ### PR Phase
          - **Status:** Pending
          
          ---
          *Pipeline managed by atriumn-shared-workflows*
          RECORD_EOF
          )
          
          # Output the decision record content for the calling workflow to use
          echo "decision_record<<DECISION_RECORD_EOF" >> $GITHUB_OUTPUT
          echo "$DECISION_RECORD_CONTENT" >> $GITHUB_OUTPUT
          echo "DECISION_RECORD_EOF" >> $GITHUB_OUTPUT
          
          echo "✅ Pipeline setup complete"
          echo "   Branch: $BRANCH_NAME"
          echo "   Pipeline ID: $PIPELINE_ID"
          echo "   Issue: #${{ inputs.issue_number }} - $ISSUE_TITLE"
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}

  # All other jobs removed - they will be handled by the calling workflow
  # This shared workflow now only does setup and returns outputs