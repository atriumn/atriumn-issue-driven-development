name: CI/CD for Atriumn GitHub App

on:
  push:
    branches: [main, develop]
  pull_request:
    paths:
      - 'github-app/**'

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    
    defaults:
      run:
        working-directory: ./github-app

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: github-app/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        # Add the --coverage flag to generate a report
        run: npm test -- --coverage

      - name: Enforce Code Coverage
        run: |
          # This simple script uses grep to find the total statement coverage percentage
          # from the text summary report and checks if it meets the threshold.
          # For a more advanced setup, you could use a dedicated GitHub Action.
          
          # Extract the percentage for the "All files" statement coverage
          COVERAGE=$(cat ./coverage/text-summary.txt | grep Statements | awk '{print $3}' | sed 's/%//')
          
          echo "Current statement coverage is ${COVERAGE}%"
          
          # Check if coverage is below 80% (using bc for floating point comparison)
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "::error::Code coverage is ${COVERAGE}%, which is below the 80% threshold."
            exit 1
          else
            echo "âœ… Code coverage is sufficient."
          fi

      # --- Vercel Deployment Steps ---
      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Pull Vercel Project Information
        run: vercel pull --yes --environment=${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Build Project Artifacts
        run: vercel build ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} ${{ github.ref == 'refs/heads/main' && '--prod' || '' }}