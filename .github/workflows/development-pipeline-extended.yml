# Extended workflow jobs for planning and implementation phases
# This would be included in the main development-pipeline.yml file

  # Triggered by: Claude completing planning
  validate-planning:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '‚úÖ Planning Phase Complete')
    needs: load-config
    runs-on: ubuntu-latest
    steps:
      - name: Checkout shared workflows
        uses: actions/checkout@v4
        with:
          repository: atriumn/atriumn-shared-workflows
          path: shared-workflows
          
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          
      - name: Get pipeline branch and checkout
        id: branch
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          BRANCH_NAME=$(gh issue view ${{ github.event.issue.number }} --repo ${{ inputs.repo_name }} --json labels --jq '.labels[] | select(.name | startswith("branch:")) | .name | sub("branch:"; "")')
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          git checkout "$BRANCH_NAME"
          git pull origin "$BRANCH_NAME"

      - name: Find and validate plan document
        id: validate
        run: |
          THOUGHTS_DIR="${{ needs.load-config.outputs.thoughts_dir }}"
          
          # Find plan document
          PLAN_DOC=$(find "$THOUGHTS_DIR/shared/plans" -name "*issue-${{ github.event.issue.number }}*" -type f | head -1)
          
          if [ -z "$PLAN_DOC" ]; then
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            echo "error=No implementation plan found for issue #${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "plan_doc=$PLAN_DOC" >> $GITHUB_OUTPUT
          
          # Run validation script
          if ./shared-workflows/scripts/validate-plan.sh "$PLAN_DOC"; then
            echo "validation_passed=true" >> $GITHUB_OUTPUT
            
            # Extract plan metadata for reporting
            PHASES=$(grep -c "^## Phase [0-9]" "$PLAN_DOC" || echo "0")
            echo "phase_count=$PHASES" >> $GITHUB_OUTPUT
          else
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            echo "error=Implementation plan validation failed" >> $GITHUB_OUTPUT
          fi

      - name: Update decision record with planning results
        if: steps.validate.outputs.validation_passed == 'true'
        run: |
          THOUGHTS_DIR="${{ needs.load-config.outputs.thoughts_dir }}"
          DECISION_FILE="$THOUGHTS_DIR/shared/decisions/pipeline-issue-${{ github.event.issue.number }}.md"
          PLAN_DOC="${{ steps.validate.outputs.plan_doc }}"
          
          # Extract plan summary for decision record
          PHASES="${{ steps.validate.outputs.phase_count }}"
          
          cat >> "$DECISION_FILE" << EOF
          
          ## Planning Phase (Complete ‚úÖ)
          - **Completed**: $(date -Iseconds)
          - **Document**: $PLAN_DOC
          - **Validation**: ‚úÖ Passed automated validation
          - **Phases**: $PHASES implementation phases
          - **Success Criteria**: $(grep -c "#### .*Verification:" "$PLAN_DOC") criteria defined
          - **Status**: Ready for implementation phase
          
          ### Implementation Strategy
          - **Approach**: $(grep -A 2 "## Implementation Approach" "$PLAN_DOC" | tail -1 | sed 's/^[[:space:]]*//')
          - **Timeline**: $(grep -A 2 "Timeline" "$PLAN_DOC" | tail -1 | sed 's/^[[:space:]]*//' || echo "See plan document")
          
          EOF
          
          git config user.name "Pipeline Bot"
          git config user.email "pipeline@atriumn.com"
          git add "$DECISION_FILE"
          git commit -m "Pipeline: Planning phase completed for issue #${{ github.event.issue.number }}"
          git push origin ${{ steps.branch.outputs.name }}

      - name: Handle planning validation failure
        if: steps.validate.outputs.validation_passed == 'false'
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          gh issue comment ${{ github.event.issue.number }} --repo ${{ inputs.repo_name }} --body "
          ‚ùå **Planning Validation Failed**
          
          **Error**: ${{ steps.validate.outputs.error }}
          
          **Action Required**: Please review and retry the planning phase.
          
          **Common Issues:**
          - Missing required sections (phases, success criteria)
          - Success criteria not properly formatted (automated vs manual)
          - Unresolved questions or TODO items in plan
          - Missing YAML frontmatter
          
          **To Retry**: The planning phase can be restarted once issues are resolved.
          "
          exit 1

      - name: Check pipeline mode for planning approval
        id: mode
        run: |
          THOUGHTS_DIR="${{ needs.load-config.outputs.thoughts_dir }}"
          DECISION_FILE="$THOUGHTS_DIR/shared/decisions/pipeline-issue-${{ github.event.issue.number }}.md"
          
          if grep -q "Human Validation.*false" "$DECISION_FILE"; then
            echo "auto_proceed=true" >> $GITHUB_OUTPUT
          else
            echo "auto_proceed=false" >> $GITHUB_OUTPUT
          fi

      - name: Request human approval for plan
        if: steps.validate.outputs.validation_passed == 'true' && steps.mode.outputs.auto_proceed == 'false'
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          PLAN_DOC="${{ steps.validate.outputs.plan_doc }}"
          BRANCH_NAME="${{ steps.branch.outputs.name }}"
          PHASES="${{ steps.validate.outputs.phase_count }}"
          
          gh issue comment ${{ github.event.issue.number }} --repo ${{ inputs.repo_name }} --body "
          üìã **Planning Validation Required**
          
          **Automated Validation**: ‚úÖ Passed
          - ‚úÖ Plan document structure valid
          - ‚úÖ $PHASES implementation phases defined
          - ‚úÖ Success criteria properly formatted (automated vs manual)
          - ‚úÖ No unresolved questions or TODO items
          
          **Implementation Plan**: [\`$PLAN_DOC\`](https://github.com/${{ inputs.repo_name }}/blob/$BRANCH_NAME/$PLAN_DOC)
          
          **Human Review Needed**:
          @${{ github.event.issue.user.login }} Please review the implementation plan:
          
          **Review Questions:**
          - Do the $PHASES phases have appropriate scope and sequencing?
          - Are the success criteria comprehensive and testable?
          - Is the implementation strategy sound for the issue requirements?
          - Any missing edge cases or considerations?
          - Timeline and resource allocation reasonable?
          
          **Actions:**
          - ‚úÖ **Approve**: Comment \`approve plan\`
          - ‚ùå **Reject**: Comment \`reject plan: [reason]\`
          - üîÑ **Request changes**: Comment \`modify plan: [specific requests]\`
          "

      - name: Auto-proceed to implementation
        if: steps.validate.outputs.validation_passed == 'true' && steps.mode.outputs.auto_proceed == 'true'
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          gh issue comment ${{ github.event.issue.number }} --repo ${{ inputs.repo_name }} --body "
          üìã **Planning Validation**: ‚úÖ Passed (automated)
          **Auto-proceeding to Implementation Phase**
          
          ---
          
          @claude Please implement the plan following our implementation methodology:
          
          **Read complete pipeline context first:**
          \`${{ needs.load-config.outputs.thoughts_dir }}/shared/decisions/pipeline-issue-${{ github.event.issue.number }}.md\`
          
          **Critical Context:**
          - Implementation plan is documented and validated
          - Follow the phases in exact order specified in the plan
          - Current branch: \`${{ steps.branch.outputs.name }}\`
          
          **Implementation Requirements:**
          - Read the implementation plan from the branch completely
          - Execute each phase completely before moving to next
          - Run automated verification after each phase
          - Create logical git commits for each phase
          - Update decision record with implementation progress
          - Ensure all success criteria are met
          
          **Process:**
          1. **Phase Execution**: Follow plan phases sequentially
          2. **Automated Verification**: Run all specified make commands/tests
          3. **Git Commits**: Create descriptive commits for each logical change
          4. **Success Criteria**: Verify both automated and manual criteria
          5. **Documentation**: Update decision record with progress
          
          **Verification Commands** (run after each phase):
          - \`make test\` - Run all tests
          - \`make lint\` - Check code formatting
          - \`make typecheck\` - Verify type safety (if applicable)
          - Any specific commands from the plan's success criteria
          
          **Git Strategy:**
          \`\`\`bash
          git checkout ${{ steps.branch.outputs.name }}
          git pull origin ${{ steps.branch.outputs.name }}
          # For each phase:
          git add [phase-files]
          git commit -m \"Implementation Phase X: [description]\"
          # After all phases:
          git push origin ${{ steps.branch.outputs.name }}
          \`\`\`
          
          Please implement following this methodology and report progress after each phase.
          "

  # Triggered by: "approve plan" comment
  trigger-implementation:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, 'approve plan')
    needs: load-config
    runs-on: ubuntu-latest
    steps:
      - name: Record approval and trigger implementation
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          BRANCH_NAME=$(gh issue view ${{ github.event.issue.number }} --repo ${{ inputs.repo_name }} --json labels --jq '.labels[] | select(.name | startswith("branch:")) | .name | sub("branch:"; "")')
          
          gh issue comment ${{ github.event.issue.number }} --repo ${{ inputs.repo_name }} --body "
          ‚úÖ **Plan Approved by @${{ github.event.comment.user.login }}**
          **Proceeding to Implementation Phase**
          
          ---
          
          @claude Please implement the plan following our implementation methodology:
          
          **Read complete pipeline context first:**
          \`${{ needs.load-config.outputs.thoughts_dir }}/shared/decisions/pipeline-issue-${{ github.event.issue.number }}.md\`
          
          **Critical Context:**
          - Implementation plan is documented and validated
          - Follow the phases in exact order specified in the plan
          - Current branch: \`$BRANCH_NAME\`
          
          **Implementation Requirements:**
          - Read the implementation plan from the branch completely
          - Execute each phase completely before moving to next
          - Run automated verification after each phase
          - Create logical git commits for each phase
          - Update decision record with implementation progress
          - Ensure all success criteria are met
          
          **Verification Commands** (run after each phase):
          - \`make test\` - Run all tests
          - \`make lint\` - Check code formatting
          - \`make typecheck\` - Verify type safety (if applicable)
          - Any specific commands from the plan's success criteria
          
          **Git Strategy:**
          \`\`\`bash
          git checkout $BRANCH_NAME
          git pull origin $BRANCH_NAME
          # For each phase:
          git add [phase-files]
          git commit -m \"Implementation Phase X: [description]\"
          # After all phases:
          git push origin $BRANCH_NAME
          \`\`\`
          
          Please implement following this methodology and report progress after each phase.
          "

  # Triggered by: Claude completing implementation
  validate-implementation:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '‚úÖ Implementation Phase Complete')
    needs: load-config
    runs-on: ubuntu-latest
    steps:
      - name: Checkout shared workflows
        uses: actions/checkout@v4
        with:
          repository: atriumn/atriumn-shared-workflows
          path: shared-workflows
          
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          
      - name: Get pipeline branch and checkout
        id: branch
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          BRANCH_NAME=$(gh issue view ${{ github.event.issue.number }} --repo ${{ inputs.repo_name }} --json labels --jq '.labels[] | select(.name | startswith("branch:")) | .name | sub("branch:"; "")')
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          git checkout "$BRANCH_NAME"
          git pull origin "$BRANCH_NAME"

      - name: Validate implementation
        id: validate
        run: |
          # Run implementation validation script
          if ./shared-workflows/scripts/validate-implementation.sh "${{ steps.branch.outputs.name }}"; then
            echo "validation_passed=true" >> $GITHUB_OUTPUT
            
            # Gather implementation statistics
            COMMITS=$(git rev-list --count HEAD ^${{ needs.load-config.outputs.base_branch }})
            FILES_CHANGED=$(git diff --name-only ${{ needs.load-config.outputs.base_branch }} | wc -l)
            
            echo "commit_count=$COMMITS" >> $GITHUB_OUTPUT
            echo "files_changed=$FILES_CHANGED" >> $GITHUB_OUTPUT
          else
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            echo "error=Implementation validation failed" >> $GITHUB_OUTPUT
          fi

      - name: Update decision record with implementation results
        if: steps.validate.outputs.validation_passed == 'true'
        run: |
          THOUGHTS_DIR="${{ needs.load-config.outputs.thoughts_dir }}"
          DECISION_FILE="$THOUGHTS_DIR/shared/decisions/pipeline-issue-${{ github.event.issue.number }}.md"
          
          cat >> "$DECISION_FILE" << EOF
          
          ## Implementation Phase (Complete ‚úÖ)
          - **Completed**: $(date -Iseconds)
          - **Validation**: ‚úÖ All automated checks passed
          - **Commits**: ${{ steps.validate.outputs.commit_count }} commits
          - **Files Modified**: ${{ steps.validate.outputs.files_changed }} files
          - **Branch**: ${{ steps.branch.outputs.name }}
          - **Status**: Ready for PR creation
          
          ### Implementation Summary
          - **All Tests**: ‚úÖ Passing
          - **Code Quality**: ‚úÖ Linting and type checking passed
          - **Decision Record**: ‚úÖ Updated throughout implementation
          - **Git History**: ‚úÖ Clean commits with descriptive messages
          
          EOF
          
          git config user.name "Pipeline Bot"
          git config user.email "pipeline@atriumn.com"
          git add "$DECISION_FILE"
          git commit -m "Pipeline: Implementation phase completed for issue #${{ github.event.issue.number }}"
          git push origin ${{ steps.branch.outputs.name }}

      - name: Handle implementation validation failure
        if: steps.validate.outputs.validation_passed == 'false'
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          gh issue comment ${{ github.event.issue.number }} --repo ${{ inputs.repo_name }} --body "
          ‚ùå **Implementation Validation Failed**
          
          **Error**: ${{ steps.validate.outputs.error }}
          
          **Action Required**: Please review and fix implementation issues.
          
          **Common Issues:**
          - Tests failing (\`make test\` failed)
          - Code quality issues (\`make lint\` failed)
          - Type checking errors (\`make typecheck\` failed)
          - Merge conflicts with base branch
          - Decision record not updated
          
          **To Retry**: Fix the issues and the implementation phase will be re-validated.
          "
          exit 1

      - name: Auto-proceed to PR creation
        if: steps.validate.outputs.validation_passed == 'true'
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          gh issue comment ${{ github.event.issue.number }} --repo ${{ inputs.repo_name }} --body "
          ‚öôÔ∏è **Implementation Validation**: ‚úÖ Passed
          **Proceeding to PR Creation**
          
          ---
          
          @claude Please create pull request for these changes:
          
          **Read complete pipeline context:**
          \`${{ needs.load-config.outputs.thoughts_dir }}/shared/decisions/pipeline-issue-${{ github.event.issue.number }}.md\`
          
          **PR Creation Requirements:**
          - Create comprehensive PR description
          - Include links to all related documents
          - Add manual testing steps for reviewers
          - Request appropriate reviewers
          - Ensure all automated checks pass
          
          **PR Description Must Include:**
          - **Summary**: Brief description of what was implemented
          - **Related Documents**: 
            - Link to original issue: #${{ github.event.issue.number }}
            - Link to research document
            - Link to implementation plan
            - Link to decision record
          - **Changes Made**: List of key files/components modified
          - **Testing**: 
            - Automated tests that pass
            - Manual testing steps for reviewers
          - **Verification**: Confirmation all success criteria met
          
          **PR Creation Process:**
          \`\`\`bash
          gh pr create \\
            --title \"${{ github.event.issue.title }}\" \\
            --body-file pr_description.md \\
            --base ${{ needs.load-config.outputs.base_branch }} \\
            --head ${{ steps.branch.outputs.name }} \\
            --assignee @me
          \`\`\`
          
          Please create the PR and provide the link when complete.
          "