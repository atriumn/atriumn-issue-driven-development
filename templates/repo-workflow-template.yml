# Copy this to your repo: .github/workflows/development-pipeline.yml
name: Development Pipeline Integration

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, closed]

jobs:
  # Phase 1: Validation Scripts Integration
  validate-on-comment:
    if: github.event_name == 'issue_comment'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Checkout shared workflows
        uses: actions/checkout@v4
        with:
          repository: atriumn/atriumn-shared-workflows
          path: .github/shared-workflows
          
      - name: Install dependencies
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          sudo apt-get update && sudo apt-get install -y gh
          
      - name: Parse comment for validation triggers
        id: parse
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          
          echo "comment_body=$COMMENT_BODY" >> $GITHUB_OUTPUT
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          
          # Check for validation triggers
          if echo "$COMMENT_BODY" | grep -q "‚úÖ Research Phase Complete"; then
            echo "trigger=validate-research" >> $GITHUB_OUTPUT
          elif echo "$COMMENT_BODY" | grep -q "‚úÖ Planning Phase Complete"; then
            echo "trigger=validate-plan" >> $GITHUB_OUTPUT
          elif echo "$COMMENT_BODY" | grep -q "‚úÖ Implementation Phase Complete"; then
            echo "trigger=validate-implementation" >> $GITHUB_OUTPUT
          elif echo "$COMMENT_BODY" | grep -q "@claude run development pipeline"; then
            echo "trigger=start-pipeline" >> $GITHUB_OUTPUT
          else
            echo "trigger=none" >> $GITHUB_OUTPUT
          fi
          
      - name: Start development pipeline
        if: steps.parse.outputs.trigger == 'start-pipeline'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Development pipeline trigger detected"
          
          # Create branch label for tracking
          ISSUE_NUMBER="${{ steps.parse.outputs.issue_number }}"
          ISSUE_TITLE=$(gh issue view $ISSUE_NUMBER --json title --jq '.title')
          TITLE_SLUG=$(echo "$ISSUE_TITLE" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          BRANCH_NAME="feature/issue-$ISSUE_NUMBER-$TITLE_SLUG"
          
          # Create branch if it doesn't exist
          if ! git rev-parse --verify "origin/$BRANCH_NAME" >/dev/null 2>&1; then
            git checkout -b "$BRANCH_NAME"
            git push origin "$BRANCH_NAME"
            echo "‚úÖ Created branch: $BRANCH_NAME"
          fi
          
          # Add branch label
          gh label create "branch:$BRANCH_NAME" --color "0366d6" --description "Pipeline branch" || true
          gh issue edit $ISSUE_NUMBER --add-label "branch:$BRANCH_NAME"
          
          gh issue comment $ISSUE_NUMBER --body "
          üöÄ **Development Pipeline Started**
          
          **Branch**: \`$BRANCH_NAME\` (created from \`main\`)
          **Next Step**: Please begin research following the methodology
          
          **Research Requirements:**
          - Create research document in \`thoughts/shared/research/\`
          - Use YAML frontmatter with metadata
          - Include code references with file:line format
          - Comment \`‚úÖ Research Phase Complete\` when done
          "
          
      - name: Validate research phase
        if: steps.parse.outputs.trigger == 'validate-research'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Validating research phase..."
          
          ISSUE_NUMBER="${{ steps.parse.outputs.issue_number }}"
          
          # Find research document
          RESEARCH_DOC=$(find thoughts/shared/research -name "*issue-$ISSUE_NUMBER*" -type f | head -1)
          
          if [ -z "$RESEARCH_DOC" ]; then
            gh issue comment $ISSUE_NUMBER --body "‚ùå **Research Validation Failed**: No research document found for issue #$ISSUE_NUMBER"
            exit 1
          fi
          
          # Run validation
          if ./.github/shared-workflows/scripts/validate-research.sh "$RESEARCH_DOC"; then
            gh issue comment $ISSUE_NUMBER --body "
            ‚úÖ **Research Validation Passed**
            
            **Document**: \`$RESEARCH_DOC\`
            **Next Step**: Create implementation plan
            - Comment \`‚úÖ Planning Phase Complete\` when done
            "
          else
            gh issue comment $ISSUE_NUMBER --body "‚ùå **Research Validation Failed**: Please review document structure and content"
            exit 1
          fi
          
      - name: Validate planning phase
        if: steps.parse.outputs.trigger == 'validate-plan'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üìã Validating planning phase..."
          
          ISSUE_NUMBER="${{ steps.parse.outputs.issue_number }}"
          
          # Find plan document
          PLAN_DOC=$(find thoughts/shared/plans -name "*issue-$ISSUE_NUMBER*" -type f | head -1)
          
          if [ -z "$PLAN_DOC" ]; then
            gh issue comment $ISSUE_NUMBER --body "‚ùå **Planning Validation Failed**: No plan document found for issue #$ISSUE_NUMBER"
            exit 1
          fi
          
          # Run validation
          if ./.github/shared-workflows/scripts/validate-plan.sh "$PLAN_DOC"; then
            gh issue comment $ISSUE_NUMBER --body "
            ‚úÖ **Planning Validation Passed**
            
            **Document**: \`$PLAN_DOC\`
            **Next Step**: Implement the plan
            - Comment \`‚úÖ Implementation Phase Complete\` when done
            "
          else
            gh issue comment $ISSUE_NUMBER --body "‚ùå **Planning Validation Failed**: Please review plan structure and success criteria"
            exit 1
          fi
          
      - name: Validate implementation phase
        if: steps.parse.outputs.trigger == 'validate-implementation'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "‚öôÔ∏è Validating implementation phase..."
          
          ISSUE_NUMBER="${{ steps.parse.outputs.issue_number }}"
          
          # Get branch name from labels
          BRANCH_NAME=$(gh issue view $ISSUE_NUMBER --json labels --jq '.labels[] | select(.name | startswith("branch:")) | .name | sub("branch:"; "")')
          
          if [ -z "$BRANCH_NAME" ]; then
            gh issue comment $ISSUE_NUMBER --body "‚ùå **Implementation Validation Failed**: No pipeline branch found"
            exit 1
          fi
          
          # Run validation
          if ./.github/shared-workflows/scripts/validate-implementation.sh "$BRANCH_NAME"; then
            gh issue comment $ISSUE_NUMBER --body "
            ‚úÖ **Implementation Validation Passed**
            
            **Branch**: \`$BRANCH_NAME\`
            **Next Step**: Create pull request for review
            "
          else
            gh issue comment $ISSUE_NUMBER --body "‚ùå **Implementation Validation Failed**: Please review implementation and fix issues"
            exit 1
          fi
          
  # Validate PRs when opened
  validate-pr:
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout shared workflows
        uses: actions/checkout@v4
        with:
          repository: atriumn/atriumn-shared-workflows
          path: .github/shared-workflows
          
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y gh
          
      - name: Validate PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          if ./.github/shared-workflows/scripts/validate-pr.sh "$PR_NUMBER"; then
            gh pr comment $PR_NUMBER --body "‚úÖ **PR Validation Passed** - Ready for review"
          else
            gh pr comment $PR_NUMBER --body "‚ùå **PR Validation Failed** - Please review requirements"
            exit 1
          fi